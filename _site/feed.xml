<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-09-25T23:03:43+07:00</updated><id>/feed.xml</id><title type="html">nvkhuy</title><entry><title type="html">Dependency Injection vs Dependency Inversion</title><link href="/dependency-injection-vs-dependency-inversion" rel="alternate" type="text/html" title="Dependency Injection vs Dependency Inversion" /><published>2023-09-25T00:00:00+07:00</published><updated>2023-09-25T00:00:00+07:00</updated><id>/dependency-injection-vs-dependency-inversion</id><content type="html" xml:base="/dependency-injection-vs-dependency-inversion"><![CDATA[<p>Dependency Injection (DI) and Dependency Inversion (DI) are two related but distinct concepts in software design and architecture, often used together to achieve loose coupling and improve the maintainability and flexibility of software systems. Let’s explore each concept individually:</p>

<ol>
  <li>Dependency Injection (DI):
    <ul>
      <li>Dependency Injection is a design pattern and technique used in object-oriented programming to manage dependencies between classes and components.</li>
      <li>In DI, dependencies are “injected” into a class rather than the class creating its own dependencies. This injection can occur through constructor injection, method injection, or property injection.</li>
      <li>The main goal of DI is to decouple the high-level modules (e.g., classes or components) from their low-level dependencies (e.g., other classes or services). This makes the code more modular, testable, and flexible.</li>
      <li>DI promotes the use of interfaces or abstract classes to define contracts between components, allowing for easy substitution of implementations, which is essential for achieving flexibility and maintainability.</li>
    </ul>
  </li>
  <li>Dependency Inversion (DI):
    <ul>
      <li>Dependency Inversion is one of the SOLID principles of object-oriented design, specifically the “D” in SOLID, which stands for the Dependency Inversion Principle (DIP).</li>
      <li>The Dependency Inversion Principle states that high-level modules (e.g., classes or components) should not depend on low-level modules. Both should depend on abstractions (interfaces or abstract classes).</li>
      <li>In other words, it encourages the inversion of the traditional dependency hierarchy. Instead of concrete classes depending on abstractions, it encourages abstractions (interfaces) to depend on other abstractions.</li>
      <li>By adhering to the Dependency Inversion Principle, you create a level of indirection that allows for greater flexibility and extensibility in your codebase. It also promotes the use of DI as a means to achieve this inversion.</li>
    </ul>
  </li>
</ol>

<p>Dependency Injection is a technique used to implement the Dependency Inversion Principle. While Dependency Injection focuses on how to inject dependencies into classes or components, Dependency Inversion focuses on the high-level design principle that encourages the use of abstractions and the inversion of dependencies. When used together, these concepts help create more modular, maintainable, and flexible software systems.</p>

<h2 id="dependency-injection-in-go">Dependency Injection in Go:</h2>

<p>Implement Dependency Injection by passing dependencies (usually as interfaces) as parameters to functions or constructors. Here’s a simple example of Dependency Injection:</p>

<pre><code class="language-go">package main

import (
    "fmt"
)

type Database interface {
    Query(query string) string
}

type MySQLDatabase struct{}

func (db MySQLDatabase) Query(query string) string {
    return "Result from MySQL: " + query
}

type PostgreSQLDatabase struct{}

func (db PostgreSQLDatabase) Query(query string) string {
    return "Result from PostgreSQL: " + query
}

func ReportGenerator(db Database, reportName string) string {
    query := "SELECT * FROM " + reportName
    result := db.Query(query)
    return "Generating report with: " + result
}

func main() {
    mysqlDB := MySQLDatabase{}
    postgresDB := PostgreSQLDatabase{}

    report1 := ReportGenerator(mysqlDB, "sales_report")
    report2 := ReportGenerator(postgresDB, "financial_report")

    fmt.Println(report1)
    fmt.Println(report2)
}
</code></pre>

<p>In this example:</p>

<ol>
  <li>We define a <code>Database</code> interface representing a database connection with a <code>Query</code> method.</li>
  <li>We create two concrete implementations of the <code>Database</code> interface: <code>MySQLDatabase</code> and <code>PostgreSQLDatabase</code>.</li>
  <li>The <code>ReportGenerator</code> function takes a <code>Database</code> interface as a parameter and generates a report using the provided database.</li>
  <li>In the <code>main</code> function, we create instances of the concrete database implementations (MySQL and PostgreSQL) and pass them as dependencies to the <code>ReportGenerator</code> function.</li>
</ol>

<p>This demonstrates the concept of Dependency Injection, as the <code>ReportGenerator</code> function does not create its own database instance but relies on the caller to provide the appropriate database implementation. This allows for flexibility and easy testing since you can easily swap out different database implementations without modifying the <code>ReportGenerator</code> function.</p>

<h2 id="dependency-inversion-in-go">Dependency Inversion in Go:</h2>

<p>Dependency Inversion in Go can be implemented by defining interfaces (abstractions) that high-level modules depend on, and then providing concrete implementations for these interfaces in low-level modules. Here’s an example to illustrate Dependency Inversion in Go:</p>

<pre><code class="language-go">package main

import (
	"fmt"
)

type DataStore interface {
	Save(data string)
}

type FileStorage struct{}

func (fs FileStorage) Save(data string) {
	fmt.Println("Saving to file:", data)
}

type DatabaseStorage struct{}

func (ds DatabaseStorage) Save(data string) {
	fmt.Println("Saving to database:", data)
}

type DataProcessor struct {
	Storage DataStore
}

func (dp DataProcessor) ProcessAndSave(data string) {
	fmt.Println("Processing data...")
	dp.Storage.Save(data)
}

func main() {
	fileStorage := FileStorage{}
	dbStorage := DatabaseStorage{}

	fileDataProcessor := DataProcessor{Storage: fileStorage}
	dbDataProcessor := DataProcessor{Storage: dbStorage}

	dataToSave := "Some important data"

	fileDataProcessor.ProcessAndSave(dataToSave)
	dbDataProcessor.ProcessAndSave(dataToSave)
}
</code></pre>

<p>In this example:</p>

<ol>
  <li>We define the <code>DataStore</code> interface representing a data storage mechanism with a <code>Save</code> method.</li>
  <li>We provide two concrete implementations: <code>FileStorage</code> and <code>DatabaseStorage</code>, each implementing the <code>DataStore</code> interface.</li>
  <li>The <code>DataProcessor</code> struct is a high-level module that depends on the <code>DataStore</code> interface. It has a <code>ProcessAndSave</code> method that uses the <code>DataStore</code> to save data.</li>
  <li>In the <code>main</code> function, we create instances of the concrete implementations (<code>FileStorage</code> and <code>DatabaseStorage</code>) and inject them into <code>DataProcessor</code> instances. This is where Dependency Inversion is demonstrated: high-level <code>DataProcessor</code> depends on the abstract <code>DataStore</code> interface, not on concrete implementations.</li>
</ol>

<p>This structure allows you to easily switch between different storage implementations (e.g., file storage or database storage) without modifying the <code>DataProcessor</code> code, adhering to the Dependency Inversion Principle.</p>]]></content><author><name></name></author><category term="principle" /><summary type="html"><![CDATA[Dependency Injection (DI) and Dependency Inversion (DI) are two related but distinct concepts in software design and architecture, often used together to achieve loose coupling and improve the maintainability and flexibility of software systems. Let’s explore each concept individually:]]></summary></entry><entry><title type="html">Go Design Patterns</title><link href="/go-design-patterns" rel="alternate" type="text/html" title="Go Design Patterns" /><published>2023-09-24T00:00:00+07:00</published><updated>2023-09-24T00:00:00+07:00</updated><id>/go-design-patterns</id><content type="html" xml:base="/go-design-patterns"><![CDATA[<h1 id="iterator-pattern"><strong>Iterator Pattern</strong></h1>

<p>The iterator pattern is a behavioral design pattern that provides a way to access the elements of a collection sequentially without exposing its underlying representation. In Go, you can implement the iterator pattern using a combination of interfaces and custom types. Here’s an example of how to implement the iterator pattern in Go:</p>

<pre><code class="language-go">package main

import "fmt"

type Iterator interface {
	HasNext() bool
	Next() interface{}
}

type Aggregate interface {
	CreateIterator() Iterator
}

type ConcreteAggregate struct {
	data []interface{}
}

func (ca *ConcreteAggregate) CreateIterator() Iterator {
	return &amp;ConcreteIterator{aggregate: ca}
}

type ConcreteIterator struct {
	aggregate *ConcreteAggregate
	index     int
}

func (ci *ConcreteIterator) HasNext() bool {
	return ci.index &lt; len(ci.aggregate.data)
}

func (ci *ConcreteIterator) Next() interface{} {
	if ci.HasNext() {
		item := ci.aggregate.data[ci.index]
		ci.index++
		return item
	}
	return nil
}

func main() {
	aggregate := &amp;ConcreteAggregate{
		data: []interface{}{"Item 1", "Item 2", "Item 3", "Item 4"},
	}

	iterator := aggregate.CreateIterator()

	for iterator.HasNext() {
		item := iterator.Next()
		fmt.Println(item)
	}
}
</code></pre>

<p>In this example:</p>

<ul>
  <li>
    <p>We define an <code>Iterator</code> interface with two methods: <code>HasNext</code> to check if there are more elements to iterate and <code>Next</code> to retrieve the next element.</p>
  </li>
  <li>
    <p>We define an <code>Aggregate</code> interface with one method: <code>CreateIterator</code>, which creates and returns an iterator.</p>
  </li>
  <li>
    <p>We create a <code>ConcreteAggregate</code> struct that holds the actual collection data and implements the <code>Aggregate</code> interface by providing a method to create an iterator.</p>
  </li>
  <li>
    <p>We create a <code>ConcreteIterator</code> struct that implements the <code>Iterator</code> interface and keeps track of the current position within the collection.</p>
  </li>
  <li>
    <p>In the <code>main</code> function, we create a <code>ConcreteAggregate</code> instance, add some elements to it, and then create an iterator for it. We iterate through the elements using the iterator, demonstrating how the iterator pattern allows you to access elements sequentially without exposing the underlying representation of the collection.</p>
  </li>
</ul>

<h1 id="strategy-pattern"><strong>Strategy Pattern</strong></h1>

<p>The strategy pattern is a behavioral design pattern that defines a family of algorithms, encapsulates each one, and makes them interchangeable. It allows you to select an algorithm from a family of algorithms at runtime. In Go, you can implement the strategy pattern using interfaces and different concrete implementations. Here’s an example of the strategy pattern in Go:</p>

<pre><code class="language-go">package main

import "fmt"

type PaymentStrategy interface {
	Pay(amount float64)
}

type CreditCardPayment struct{}

func (c *CreditCardPayment) Pay(amount float64) {
	fmt.Printf("Paid %.2f via credit card\n", amount)
}

type PayPalPayment struct{}

func (p *PayPalPayment) Pay(amount float64) {
	fmt.Printf("Paid %.2f via PayPal\n", amount)
}

type ShoppingCart struct {
	paymentStrategy PaymentStrategy
}

func NewShoppingCart(paymentStrategy PaymentStrategy) *ShoppingCart {
	return &amp;ShoppingCart{
		paymentStrategy: paymentStrategy,
	}
}

func (cart *ShoppingCart) Checkout(amount float64) {
	cart.paymentStrategy.Pay(amount)
}

func main() {
	creditCardCart := NewShoppingCart(&amp;CreditCardPayment{})
	creditCardCart.Checkout(100.00)

	payPalCart := NewShoppingCart(&amp;PayPalPayment{})
	payPalCart.Checkout(50.00)
}
</code></pre>

<p>In this example:</p>

<ul>
  <li>
    <p>We define a <code>PaymentStrategy</code> interface with a <code>Pay</code> method that represents the common method for all payment strategies.</p>
  </li>
  <li>
    <p>We create two concrete payment strategy implementations: <code>CreditCardPayment</code> and <code>PayPalPayment</code>, each implementing the <code>Pay</code> method differently.</p>
  </li>
  <li>
    <p>The <code>ShoppingCart</code> struct represents a shopping cart that uses a payment strategy. It has a <code>Checkout</code> method that takes an amount and processes the payment using the selected payment strategy.</p>
  </li>
  <li>
    <p>In the <code>main</code> function, we create two shopping carts, one with a credit card payment strategy and another with a PayPal payment strategy. We then call the <code>Checkout</code> method on each shopping cart, demonstrating how you can switch between different payment strategies at runtime.</p>
  </li>
</ul>

<p>This example shows how to implement the strategy pattern in Go to encapsulate payment algorithms and make them interchangeable without changing the client code.</p>

<h1 id="factory-pattern"><strong>Factory Pattern</strong></h1>

<p>The factory pattern is a creational design pattern that provides an interface for creating objects in a super class, but allows subclasses to alter the type of objects that will be created. In Go, you can implement the factory pattern using functions and interfaces. Here’s an example of the factory pattern in Go:</p>

<pre><code class="language-go">package main

import "fmt"

type Shape interface {
	Area() float64
}

type Circle struct {
	Radius float64
}

func (c *Circle) Area() float64 {
	return 3.14 * c.Radius * c.Radius
}

type Rectangle struct {
	Width  float64
	Height float64
}

func (r *Rectangle) Area() float64 {
	return r.Width * r.Height
}

type ShapeFactory interface {
	CreateShape() Shape
}

type CircleFactory struct{}

func (cf *CircleFactory) CreateShape() Shape {
	return &amp;Circle{Radius: 1.0}
}

type RectangleFactory struct{}

func (rf *RectangleFactory) CreateShape() Shape {
	return &amp;Rectangle{Width: 2.0, Height: 3.0}
}

func main() {
	circleFactory := &amp;CircleFactory{}
	circle := circleFactory.CreateShape()
	fmt.Printf("Circle Area: %.2f\n", circle.Area())

	rectangleFactory := &amp;RectangleFactory{}
	rectangle := rectangleFactory.CreateShape()
	fmt.Printf("Rectangle Area: %.2f\n", rectangle.Area())
}
</code></pre>

<p>In this example:</p>

<ul>
  <li>
    <p>We define a <code>Shape</code> interface that represents common methods for all shapes, and two concrete shapes, <code>Circle</code> and <code>Rectangle</code>, each implementing the <code>Area</code> method differently.</p>
  </li>
  <li>
    <p>We define a <code>ShapeFactory</code> interface that declares a method for creating shapes, and two concrete factories, <code>CircleFactory</code> and <code>RectangleFactory</code>, each implementing the <code>CreateShape</code> method to create specific shapes.</p>
  </li>
  <li>
    <p>In the <code>main</code> function, we create instances of <code>Circle</code> and <code>Rectangle</code> using their respective factories. This demonstrates how the factory pattern allows you to create objects without specifying their concrete types, making it easier to change or extend the types of objects created by the factory without modifying the client code.</p>
  </li>
</ul>

<p>The factory pattern is particularly useful when you need to create objects with complex initialization logic or when you want to decouple the client code from the concrete types being created.</p>]]></content><author><name></name></author><category term="go" /><summary type="html"><![CDATA[Iterator Pattern]]></summary></entry><entry><title type="html">What is ACID in database</title><link href="/what-is-acid-in-database" rel="alternate" type="text/html" title="What is ACID in database" /><published>2023-09-18T00:00:00+07:00</published><updated>2023-09-18T00:00:00+07:00</updated><id>/what-is-acid</id><content type="html" xml:base="/what-is-acid-in-database"><![CDATA[<p>ACID is an acronym that represents a set of properties or characteristics that ensure reliable and predictable database transactions. These properties are essential for maintaining the integrity and consistency of data within a database. The ACID properties stand for:</p>

<ol>
  <li><strong>Atomicity (A):</strong>
    <ul>
      <li>Atomicity ensures that a transaction is treated as a single, indivisible unit of work. Either all the changes made in a transaction are applied, or none of them are. If any part of the transaction fails, the entire transaction is rolled back, leaving the database in its original state.</li>
      <li>Example: Consider a banking application where a user transfers money from one account to another. Atomicity ensures that if the withdrawal from one account succeeds but the deposit to the other fails (e.g., due to an error), the entire transaction is rolled back, and the user’s balance remains unchanged.</li>
    </ul>
  </li>
  <li><strong>Consistency (C):</strong>
    <ul>
      <li>Consistency ensures that a transaction takes the database from one consistent state to another consistent state. It enforces data integrity rules, constraints, and relationships defined in the database schema. If a transaction violates these rules, it is rolled back.</li>
      <li>Example: In a database that tracks orders and inventory, consistency ensures that an order cannot be created if there is insufficient inventory for the requested items. If an order violates this constraint, the transaction is rolled back, and the database remains in a consistent state.</li>
    </ul>
  </li>
  <li><strong>Isolation (I):</strong>
    <ul>
      <li>Isolation ensures that concurrent transactions do not interfere with each other. Each transaction should appear to be executed in isolation, as if it were the only transaction in the system. This prevents issues like race conditions and ensures that the final state of the database is consistent.</li>
      <li>Example: In a multi-user system, two users simultaneously updating the same record should not result in one user’s changes overwriting the other’s. Isolation mechanisms, such as locks or transaction isolation levels, prevent such interference.</li>
    </ul>
  </li>
  <li><strong>Durability (D):</strong>
    <ul>
      <li>Durability guarantees that once a transaction is committed, its changes are permanent and will survive any subsequent system failures, such as power outages or crashes. The data is stored in a non-volatile storage medium like disk or solid-state storage to ensure durability.</li>
      <li>Example: If a user submits an order and receives a confirmation, the order data should not be lost even if the database server crashes immediately after the confirmation is sent. Durability ensures that the order data is not lost during such failures.</li>
    </ul>
  </li>
</ol>

<p>These ACID properties are crucial for ensuring the reliability and integrity of data in a database management system, especially in scenarios where transactions involve critical and sensitive data. Database systems like traditional relational databases (e.g., PostgreSQL, Oracle, SQL Server) are known for adhering to the ACID properties. However, it’s important to note that strict adherence to ACID can sometimes impact system performance, which has led to the emergence of databases that offer a different set of trade-offs known as “BASE” (Basically Available, Soft state, Eventually consistent).</p>

<p>ACID (Atomicity, Consistency, Isolation, Durability) is a set of properties that ensure reliable and predictable database transactions. While ACID provides strong guarantees for data integrity and consistency, it also comes with its own set of advantages and disadvantages:</p>

<p><strong>Advantages of ACID:</strong></p>

<ol>
  <li>
    <p><strong>Data Integrity:</strong> ACID transactions ensure that data remains in a consistent and reliable state, even in the face of system failures or errors. This is crucial for applications that handle critical or sensitive data.</p>
  </li>
  <li>
    <p><strong>Consistency:</strong> ACID transactions enforce data integrity rules, constraints, and relationships defined in the database schema. This consistency ensures that the database remains in a valid state at all times.</p>
  </li>
  <li>
    <p><strong>Isolation:</strong> ACID provides isolation mechanisms that prevent concurrent transactions from interfering with each other, reducing the risk of data corruption and race conditions.</p>
  </li>
  <li>
    <p><strong>Durability:</strong> ACID guarantees that once a transaction is committed, its changes are permanent and will survive system failures. This ensures that data remains available even after unexpected crashes.</p>
  </li>
  <li>
    <p><strong>Predictability:</strong> Developers can rely on the predictability and reliability of ACID transactions when designing and implementing applications. This makes it easier to reason about how data changes and ensure the correctness of the application’s logic.</p>
  </li>
</ol>

<p><strong>Disadvantages of ACID:</strong></p>

<ol>
  <li>
    <p><strong>Performance Overhead:</strong> ACID transactions often come with a performance overhead due to the need for locking, logging, and ensuring strong consistency. This overhead can impact the throughput and response times of database operations, especially in high-concurrency scenarios.</p>
  </li>
  <li>
    <p><strong>Complexity:</strong> Implementing and managing ACID transactions can be complex and require careful design and planning. Handling transactions, locking, and isolation levels can be challenging in distributed systems.</p>
  </li>
  <li>
    <p><strong>Scalability Challenges:</strong> ACID properties can make it difficult to scale horizontally because maintaining strong consistency across multiple distributed nodes can be complex and can limit scalability.</p>
  </li>
  <li>
    <p><strong>Inflexibility:</strong> ACID’s strict requirements may not be suitable for all types of applications. In some cases, relaxed consistency models (e.g., BASE) may be more appropriate, especially for applications where high availability and partition tolerance are paramount.</p>
  </li>
  <li>
    <p><strong>Resource Utilization:</strong> ACID transactions can tie up system resources, such as locks and memory, for extended periods, potentially leading to resource contention and bottlenecks.</p>
  </li>
</ol>

<p>In summary, ACID transactions are well-suited for applications where data integrity, consistency, and predictability are critical, such as financial systems, healthcare applications, and other mission-critical systems. However, they may introduce performance and scalability challenges in large, high-concurrency systems. Choosing whether to use ACID or a more relaxed consistency model (e.g., BASE) depends on the specific requirements and trade-offs of your application.</p>]]></content><author><name></name></author><category term="database" /><summary type="html"><![CDATA[ACID is an acronym that represents a set of properties or characteristics that ensure reliable and predictable database transactions. These properties are essential for maintaining the integrity and consistency of data within a database. The ACID properties stand for:]]></summary></entry><entry><title type="html">What is CAP Theorem</title><link href="/what-is-cap-theorem" rel="alternate" type="text/html" title="What is CAP Theorem" /><published>2023-09-18T00:00:00+07:00</published><updated>2023-09-18T00:00:00+07:00</updated><id>/what-is-cap</id><content type="html" xml:base="/what-is-cap-theorem"><![CDATA[<p>The CAP theorem, also known as Brewer’s theorem, is a fundamental concept in distributed systems that deals with the trade-offs between three key properties: Consistency, Availability, and Partition Tolerance. The CAP theorem asserts that, in a distributed system, you can only guarantee two out of these three properties at any given time. Here are the details of each property:</p>

<ol>
  <li><strong>Consistency (C):</strong>
    <ul>
      <li>Consistency refers to the idea that all nodes in a distributed system have a consistent view of the data. In other words, if a write operation is acknowledged as successful, any subsequent read operation should return that updated value or a more recent one.</li>
      <li>Strong consistency ensures that every read operation will return the most recent write’s result.</li>
      <li>Achieving strong consistency often involves synchronization mechanisms that can introduce latency and reduce system availability.</li>
    </ul>
  </li>
  <li><strong>Availability (A):</strong>
    <ul>
      <li>Availability refers to the system’s ability to respond to client requests, even when some parts of the system are experiencing failures. In an available system, every request eventually receives a response, either with the requested data or an error message.</li>
      <li>High availability is crucial for systems that need to deliver uninterrupted services, even in the face of hardware failures or network issues.</li>
      <li>Ensuring high availability may lead to relaxing the constraints of strong consistency in some cases.</li>
    </ul>
  </li>
  <li><strong>Partition Tolerance (P):</strong>
    <ul>
      <li>Partition tolerance deals with the ability of a distributed system to continue functioning correctly, even when network partitions (communication failures) occur between nodes in the system.</li>
      <li>Network partitions can lead to scenarios where some nodes in the system cannot communicate with others, causing data inconsistencies and challenges in achieving both consistency and availability.</li>
      <li>Achieving partition tolerance is essential for robust distributed systems, especially in cloud-based and wide-area network environments.</li>
    </ul>
  </li>
</ol>

<p>Now, the CAP theorem states that you can’t have all three of these properties simultaneously in a distributed system. You have to make trade-offs:</p>

<ol>
  <li>
    <p><strong>CA:</strong> You can prioritize both Consistency and Availability but may need to sacrifice Partition Tolerance. In this case, the system ensures strong consistency and high availability but may not be able to function correctly in the presence of network partitions.</p>
  </li>
  <li>
    <p><strong>CP:</strong> You can prioritize both Consistency and Partition Tolerance but may need to sacrifice Availability. In this case, the system ensures strong consistency and can tolerate network partitions, but it might experience downtime or reduced availability during network disruptions.</p>
  </li>
  <li>
    <p><strong>AP:</strong> You can prioritize both Availability and Partition Tolerance but may need to sacrifice Strong Consistency. In this case, the system ensures high availability and can tolerate network partitions, but it might provide eventually consistent data.</p>
  </li>
</ol>

<p>It’s important to note that the CAP theorem is a theoretical framework that helps in understanding the trade-offs in distributed systems design. In practice, various databases and distributed systems may offer different configurations and trade-offs to meet specific use cases and requirements. Your choice of system depends on your application’s needs and the specific balance you wish to strike between consistency, availability, and partition tolerance.</p>

<p>Let’s delve into the details of why each of the mentioned databases primarily focuses on two out of the three CAP properties (Consistency, Availability, and Partition Tolerance) and provide an example for each:</p>

<ol>
  <li><strong>Firestore (part of Google Cloud Firestore):</strong>
    <ul>
      <li><strong>Consistency and Partition Tolerance:</strong> Firestore prioritizes strong consistency and partition tolerance. It ensures that when you write data, you can immediately read the most recent version (strong consistency), and it can continue to function even when network partitions occur (partition tolerance).</li>
      <li><strong>Example:</strong> Suppose you have a Firestore database for a real-time messaging application. When a user sends a message, they expect that their own messages are immediately visible to them and that their friends see those messages in a consistent order. Firestore achieves this strong consistency while handling network disruptions gracefully.</li>
    </ul>
  </li>
  <li><strong>DynamoDB (Amazon DynamoDB):</strong>
    <ul>
      <li><strong>Availability and Partition Tolerance:</strong> DynamoDB primarily focuses on high availability and partition tolerance. It ensures that read and write operations remain available even in the presence of network partitions, making it suitable for applications that require uninterrupted service.</li>
      <li><strong>Example:</strong> Consider a global e-commerce platform that uses DynamoDB to handle product catalog data. Even if there are network issues affecting some regions, customers can still browse and purchase products with minimal disruption because DynamoDB maintains high availability and partition tolerance.</li>
    </ul>
  </li>
  <li><strong>MongoDB (MongoDB Atlas - managed MongoDB service):</strong>
    <ul>
      <li><strong>Consistency and Partition Tolerance or Availability and Partition Tolerance:</strong> MongoDB offers tunable consistency, allowing you to prioritize either consistency or availability based on your configuration.</li>
      <li><strong>Example for Consistency and Partition Tolerance:</strong> In a financial application, MongoDB can be configured for strong consistency to ensure that transactions are recorded reliably and consistently, even during network disruptions.</li>
      <li><strong>Example for Availability and Partition Tolerance:</strong> In a content delivery platform, MongoDB can be configured for high availability and partition tolerance, ensuring that content remains accessible even during network partitions. However, it may allow for eventual consistency in certain scenarios to maintain availability.</li>
    </ul>
  </li>
  <li><strong>Redis (in-memory data store):</strong>
    <ul>
      <li><strong>Availability and Partition Tolerance:</strong> Redis primarily focuses on high availability and partition tolerance while sacrificing strong consistency. It excels at providing low-latency, high-throughput access to data.</li>
      <li><strong>Example:</strong> In a caching layer for a web application, Redis can be used to store frequently accessed data. During network disruptions or high traffic, Redis continues to serve cached data, ensuring availability. However, it may not guarantee strong consistency if updates are made to the data source.</li>
    </ul>
  </li>
</ol>

<p>Each database’s primary focus on specific CAP properties aligns with its intended use cases and design philosophy. When selecting a database for your application, it’s crucial to consider the trade-offs and select the one that best matches your requirements in terms of consistency, availability, and partition tolerance. Additionally, the specific configurations and features of each database can influence the trade-offs you make in practice.</p>]]></content><author><name></name></author><category term="database" /><summary type="html"><![CDATA[The CAP theorem, also known as Brewer’s theorem, is a fundamental concept in distributed systems that deals with the trade-offs between three key properties: Consistency, Availability, and Partition Tolerance. The CAP theorem asserts that, in a distributed system, you can only guarantee two out of these three properties at any given time. Here are the details of each property:]]></summary></entry><entry><title type="html">Why Go</title><link href="/why-golang" rel="alternate" type="text/html" title="Why Go" /><published>2023-09-18T00:00:00+07:00</published><updated>2023-09-18T00:00:00+07:00</updated><id>/why-golang</id><content type="html" xml:base="/why-golang"><![CDATA[<h1 id="1-what-is-a-cloud-native-application"><strong>1. What is a “Cloud Native” Application?</strong></h1>

<p>A “Cloud Native” application is a software application that is designed and built from the ground up to fully leverage the capabilities of cloud computing platforms. Unlike traditional monolithic applications, cloud-native applications are tailored to take advantage of cloud resources, scalability, and flexibility. They are developed with a specific set of principles and practices that align with the dynamic nature of cloud environments. Here are the key characteristics that define a cloud-native application:</p>

<ol>
  <li><strong>Microservices Architecture:</strong> Cloud-native applications are typically structured as a collection of loosely coupled microservices. Each microservice is a self-contained unit responsible for a specific business function. This modular approach enables easier development, deployment, scaling, and maintenance.</li>
  <li><strong>Containers:</strong> Containers are a fundamental building block of cloud-native applications. Containers package an application and its dependencies into a single, portable unit that can run consistently across different cloud environments. Containers ensure that applications run the same way in development, testing, and production.</li>
  <li><strong>Dynamic Scaling:</strong> Cloud-native applications are designed to scale horizontally, meaning that additional instances of a microservice can be added as demand increases. This elasticity ensures that the application can handle varying workloads without manual intervention.</li>
  <li><strong>Resilience and Fault Tolerance:</strong> Cloud-native applications are engineered to be resilient to failures. They can automatically recover from hardware or software failures without causing significant downtime. This is achieved through redundancy, load balancing, and automated failover mechanisms.</li>
  <li><strong>API-Driven:</strong> Cloud-native applications expose APIs (Application Programming Interfaces) that allow different components and microservices to communicate. APIs enable loose coupling between services and facilitate seamless integration between various parts of the application.</li>
  <li><strong>DevOps and Continuous Delivery:</strong> Cloud-native development embraces DevOps practices, which emphasize collaboration between development and operations teams. Continuous integration and continuous delivery (CI/CD) pipelines automate the deployment process, allowing for rapid and frequent updates to the application.</li>
  <li><strong>Statelessness:</strong> Cloud-native applications are often designed to be stateless, meaning that they do not rely on storing session data or user information on the application server. This enables easy scaling and load balancing, as requests can be directed to any available instance.</li>
  <li><strong>Configuration Management:</strong> Cloud-native applications manage their configuration externally from the application code. Configuration settings can be adjusted without redeploying the application, allowing for greater flexibility and adaptability.</li>
</ol>

<p><strong>Benefits of Cloud-Native Architecture:</strong></p>

<ul>
  <li><strong>Scalability:</strong> Cloud-native applications can scale up or down to handle varying levels of traffic and workloads.</li>
  <li><strong>Resilience:</strong> They can recover from failures quickly, minimizing downtime and ensuring consistent service availability.</li>
  <li><strong>Agility:</strong> Cloud-native development allows for faster innovation and the ability to respond to market changes promptly.</li>
  <li><strong>Resource Efficiency:</strong> Resources are allocated as needed, optimizing resource utilization and cost efficiency.</li>
  <li><strong>Elasticity:</strong> The dynamic scaling of cloud-native applications ensures optimal resource allocation, which can result in cost savings during periods of low demand.</li>
</ul>

<p>In summary, a cloud-native application is more than just software hosted in the cloud; it’s an application that’s built to fully leverage the advantages of cloud computing, enabling agility, scalability, and efficiency that traditional applications often struggle to achieve.</p>

<h1 id="2-motivation-behind-go">2. <strong>Motivation behind Go</strong></h1>

<p>Go, often referred to as Golang, is a programming language developed by a team of engineers at Google. The project was initiated in 2007, and the language was publicly announced in 2009. The development of Go was motivated by several factors:</p>

<p><strong>1. Scalability of Software Development:</strong>
Google’s engineers, including Robert Griesemer, Rob Pike, and Ken Thompson, were grappling with increasingly large and intricate software systems. They recognized that existing programming languages were not optimized for efficient development at such scale.</p>

<p><strong>2. Compilation Speed:</strong>
One of the initial motivations was to create a programming language that compiled quickly. Robert Griesemer, Rob Pike, and Ken Thompson were keen on addressing the slow compilation times that often bottlenecked Google’s development workflow.</p>

<p><strong>3. Concurrency and Multicore Processing:</strong>
As hardware architectures transitioned to multicore processors, the need for efficient concurrency support became evident. Rob Pike, in particular, was a strong advocate for addressing the challenges of managing concurrent execution in software.</p>

<p><strong>4. Garbage Collection Performance:</strong>
Garbage collection is essential for memory management in programming languages, but the existing solutions had their limitations. Go’s team, including Russ Cox, aimed to develop a garbage collection mechanism with better predictability and performance.</p>

<p><strong>5. Efficient Compilation to Native Code:</strong>
Go was designed to compile directly to machine code, bypassing the need for a virtual machine or interpreter. This design choice, driven by Ken Thompson’s expertise, resulted in code that executed efficiently and performantly.</p>

<p><strong>6. Simplicity and Readability:</strong>
The Go team, including Rob Pike, was committed to simplicity in both the language’s syntax and its feature design. Their goal was to create a language that was easy to read, write, and understand, promoting clean and maintainable code.</p>

<p><strong>7. Concurrency as a First-Class Citizen:</strong>
The creators, including Rob Pike, emphasized concurrent programming from the outset. The introduction of goroutines and channels, novel constructs for managing concurrency, was a testament to their commitment to making concurrent programming more manageable.</p>

<p><strong>8. Modern Development Practices:</strong>
Go was built to incorporate modern development practices. The team, led by Robert Griesemer and Rob Pike, included integrated testing, a robust standard library, and native support for building networked and distributed systems.</p>

<p><strong>9. C and C++ Issues:</strong>
While C and C++ were powerful but problematic in terms of memory safety and complex features, Go aimed to address these concerns. Ken Thompson, a key figure in Go’s development, sought to offer a language with enhanced memory safety.</p>

<p>In 2009, Google officially announced the release of Go to the public, and the open-source community eagerly embraced it. Go’s development continued in the open, and it gained traction among developers due to its focus on simplicity, concurrency, performance, and practicality.</p>

<p>Today, Go has become widely used in various domains, including web development, cloud services, networking, and system programming. It’s appreciated for its efficient compilation, ease of use, built-in concurrency support, and well-designed standard library. The collaboration of engineers like Robert Griesemer, Rob Pike, Ken Thompson, and Russ Cox has resulted in a language that fulfills its vision as a productive and reliable platform for modern software development.</p>

<h1 id="3-key-benefits-of-go-for-cloud-native-development">3. <strong>Key Benefits of Go for Cloud-Native Development</strong></h1>

<p><strong>1. Lightweight Nature:</strong></p>

<p>Go’s lightweight nature is a key feature that contributes to its suitability for various types of applications, including cloud-native development. This lightweight nature is a result of several design decisions and language features that prioritize efficiency and resource utilization. Here are what makes Go lightweight:</p>

<ul>
  <li><strong>Simple and Minimalistic Syntax:</strong>
Go’s syntax is intentionally designed to be clean, concise, and straightforward. The language avoids unnecessary complexity, reducing the cognitive load on developers. This simplicity translates to code that is easy to read, write, and maintain, contributing to a smaller overall codebase.</li>
  <li><strong>Small Standard Library:</strong>
Go’s standard library is minimalistic and focused on essential functionalities. This approach prevents unnecessary bloat in applications that only require specific features. Developers can import additional packages as needed, keeping the application’s memory footprint lean.</li>
  <li><strong>Statically Linked Binaries:</strong>
Go produces statically linked binaries, which means that all the necessary dependencies are compiled into the executable itself. This eliminates the need for additional dynamic libraries during runtime, resulting in self-contained executables that are lightweight and easier to distribute.</li>
  <li><strong>Minimal Runtime Overhead:</strong>
Go’s runtime overhead is kept to a minimum. The runtime provides necessary features like garbage collection, goroutine management, and reflection, but it doesn’t introduce significant overhead. This ensures that applications written in Go have a smaller runtime footprint.</li>
  <li><strong>Compiled Language:</strong>
Go is a compiled language, which means that the code is compiled into machine code before execution. This compilation step allows the compiler to optimize the code for performance and size. The resulting compiled binaries are typically smaller than those produced by interpreted or Just-In-Time (JIT) compiled languages.</li>
  <li><strong>No Virtual Machine Overhead:</strong>
Unlike languages that rely on virtual machines or interpreters, Go’s direct compilation to machine code eliminates the overhead associated with running code in a virtual environment. This results in faster startup times and reduced memory consumption.</li>
  <li><strong>Efficient Concurrency Model:</strong>
Go’s lightweight concurrency model, based on goroutines and channels, enables the creation of thousands of concurrent execution units without overwhelming system resources. This allows developers to build highly parallel and responsive applications efficiently.</li>
  <li><strong>Reduced Boilerplate Code:</strong>
Go’s focus on simplicity and minimalism leads to less boilerplate code. Features like type inference, concise variable declaration, and built-in error handling streamline code, resulting in smaller codebases.</li>
</ul>

<p><strong>2. Built-in Concurrency:</strong></p>

<p>Go’s built-in concurrency features are one of its standout characteristics, making it a powerful choice for developing applications that require efficient management of multiple concurrent tasks. These features, which include goroutines and channels, enable developers to write concurrent code that is more manageable, scalable, and responsive. Here are the details of Go’s built-in concurrency:</p>

<ul>
  <li><strong>Goroutines:</strong>
Goroutines are lightweight, independently scheduled threads of execution within a Go program. They provide a simple and efficient way to achieve concurrency. Goroutines are much lighter in memory usage and overhead compared to traditional operating system threads. They are managed by Go’s runtime scheduler, which efficiently multiplexes them onto a smaller number of operating system threads.</li>
  <li><strong>Concurrency without Overhead:</strong>
Creating a goroutine is as simple as prefixing a function call with the <strong><code>go</code></strong> keyword. This spawns a new goroutine that runs concurrently alongside the main program or other goroutines. Goroutines are managed by the Go runtime, and their creation and teardown incur minimal overhead, making it feasible to create thousands of them.</li>
  <li><strong>Cooperative Multitasking:</strong>
Goroutines are cooperatively scheduled, meaning they yield control to the scheduler during certain points in their execution (e.g., when performing I/O operations). This cooperative nature ensures that goroutines don’t block each other excessively, leading to more efficient use of system resources.</li>
  <li><strong>Channels:</strong>
Channels are the communication mechanism that allows different goroutines to exchange data and synchronize their execution. Channels provide a safe way to share data between goroutines without the need for explicit locks. They encourage the sharing of memory by communicating, not by sharing, which is a fundamental Go principle.</li>
  <li><strong>Buffered and Unbuffered Channels:</strong>
Channels can be buffered or unbuffered. Unbuffered channels ensure synchronous communication—sender and receiver synchronize at every data exchange. Buffered channels, on the other hand, allow a limited number of values to be stored before blocking, enabling asynchronous communication and reducing contention.</li>
  <li><strong>Select Statement:</strong>
The <strong><code>select</code></strong> statement is used to handle multiple channel communications within a single <strong><code>select</code></strong> block. It allows a goroutine to wait on multiple channels simultaneously and proceed with the case that becomes ready first. This construct is valuable for managing complex concurrent scenarios.</li>
  <li><strong>Data Race Detection:</strong>
Go includes built-in support for detecting and preventing data races—a type of concurrency bug where multiple goroutines access shared variables concurrently without proper synchronization. The Go runtime’s race detector can help identify potential data race conditions during testing.</li>
  <li><strong>Concurrency Patterns:</strong>
Go’s concurrency primitives enable the creation of powerful concurrency patterns. Patterns like fan-out/fan-in (parallelizing and aggregating work), worker pools (limiting concurrent processing), and pipeline processing (chaining stages of data processing) can be easily implemented with goroutines and channels.</li>
  <li><strong>Parallelism and Concurrency:</strong>
Go’s concurrency primitives enable developers to build concurrent programs. Parallelism—the simultaneous execution of tasks on multiple processors—can be achieved by running multiple goroutines on different CPU cores, leveraging the multicore processors of modern machines.</li>
  <li><strong>Simplicity and Readability:</strong>
Go’s concurrency model is designed to be intuitive and readable, reducing the likelihood of errors associated with traditional thread-based programming. This encourages developers to embrace concurrency without the fear of introducing complex synchronization issues.</li>
</ul>

<p><strong>3. Efficient Memory Management:</strong></p>

<p>Efficient memory management is a critical aspect of programming, especially in cloud-native and resource-intensive applications. Go incorporates a memory management model that aims to balance performance, resource utilization, and developer convenience. Here’s an in-depth look at how Go achieves efficient memory management:</p>

<ul>
  <li><strong>Garbage Collection (GC):</strong>
Go features an automatic garbage collection system that manages memory by reclaiming memory that is no longer in use. This alleviates the need for developers to manually allocate and deallocate memory, reducing the likelihood of memory leaks and errors.</li>
  <li><strong>Generational Garbage Collector:</strong>
Go’s garbage collector employs a generational garbage collection strategy. It divides objects into different generations based on their age, with younger objects being collected more frequently. This approach optimizes collection times and minimizes the impact on application performance.</li>
  <li><strong>Concurrent Garbage Collection:</strong>
Go’s garbage collector operates concurrently with the application code. This means that garbage collection tasks are carried out in parallel with the execution of goroutines, reducing pause times and improving application responsiveness.</li>
  <li><strong>Low Latency:</strong>
Concurrent garbage collection in Go aims to keep pause times—moments when application execution is temporarily halted for garbage collection—low and predictable. This is particularly beneficial for applications requiring real-time responsiveness.</li>
  <li><strong>Heap Management:</strong>
Go’s runtime manages the heap, where dynamically allocated objects reside. The runtime controls memory allocation, deallocation, and garbage collection cycles for the heap. Developers can focus on writing code without manually managing heap operations.</li>
  <li><strong>Small Stack Frames:</strong>
Go uses fixed-size stack frames, allowing for efficient memory allocation and deallocation. This contributes to faster function calls and lower memory consumption, particularly important in scenarios with many concurrent goroutines.</li>
  <li><strong>Escape Analysis:</strong>
Go’s compiler performs escape analysis to determine whether objects created within a function can be allocated on the stack instead of the heap. Stack allocation reduces the overhead of memory management and improves performance.</li>
  <li><strong>Deferred Memory Allocation:</strong>
Go follows a “lazy” or deferred memory allocation approach. This means that memory is allocated for a variable only when it is first used, allowing the runtime to optimize memory utilization based on actual program behavior.</li>
  <li><strong>Interface Optimization:</strong>
Go’s interface values are implemented using a small header that points to a concrete value. This reduces the memory overhead associated with storing interfaces and contributes to more efficient memory usage.</li>
  <li><strong>Efficient Concurrency Model:</strong>
Go’s lightweight goroutines and channels contribute to efficient memory usage. Goroutines have smaller stack sizes compared to traditional threads, enabling the creation of numerous concurrent tasks without consuming excessive memory.</li>
  <li><strong>Memory Layout:</strong>
Go’s memory layout is designed to be compact and cache-friendly. This helps reduce memory fragmentation and improves data access times, contributing to overall application efficiency.</li>
</ul>

<p><strong>4. Speed and Performance:</strong></p>

<p>Here’s a simplified performance comparison table between Go and some other popular programming languages.</p>

<table>
  <thead>
    <tr>
      <th>Language</th>
      <th>Concurrency Model</th>
      <th>Compilation Speed</th>
      <th>Memory Management</th>
      <th>Networking Performance</th>
      <th>Benchmark Results</th>
      <th>Microservices Support</th>
      <th>Remarks</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Go</td>
      <td>Goroutines/Channels</td>
      <td>Fast</td>
      <td>Garbage Collection</td>
      <td>Optimized</td>
      <td>Competitive</td>
      <td>Excellent</td>
      <td>Efficient concurrency and memory management.</td>
    </tr>
    <tr>
      <td>Java</td>
      <td>Threads/Executors</td>
      <td>Slower</td>
      <td>Garbage Collection</td>
      <td>Efficient</td>
      <td>Competitive</td>
      <td>Good</td>
      <td>Strong ecosystem, JIT compilation.</td>
    </tr>
    <tr>
      <td>C++</td>
      <td>Threads/Async</td>
      <td>Moderate</td>
      <td>Manual Memory Management</td>
      <td>Efficient</td>
      <td>Competitive</td>
      <td>Good</td>
      <td>Fine control, performance optimizations.</td>
    </tr>
    <tr>
      <td>Python</td>
      <td>Threads/Asyncio</td>
      <td>Slower</td>
      <td>Automatic Memory Management</td>
      <td>Moderate</td>
      <td>Moderate</td>
      <td>Fair</td>
      <td>Interpreted, dynamic typing, not best for performance.</td>
    </tr>
    <tr>
      <td>Rust</td>
      <td>Async/Await</td>
      <td>Moderate</td>
      <td>Memory Safety</td>
      <td>Efficient</td>
      <td>Competitive</td>
      <td>Good</td>
      <td>Strong emphasis on memory safety and performance.</td>
    </tr>
    <tr>
      <td>Node.js</td>
      <td>Event Loop/Async</td>
      <td>Fast</td>
      <td>Garbage Collection</td>
      <td>Efficient</td>
      <td>Moderate</td>
      <td>Good</td>
      <td>Event-driven, JavaScript runtime.</td>
    </tr>
  </tbody>
</table>

<p>It’s important to note that the choice of programming language depends on the specific requirements of the application, the developer team’s expertise, and other considerations beyond pure performance. While Go offers a strong balance between speed, performance, and developer productivity, the right choice varies based on the specific needs of the cloud-native application.</p>

<h1 id="5-compatibility-with-containers-and-orchestration">5<strong>. Compatibility with Containers and Orchestration:</strong></h1>

<p>Go is highly compatible with containers and orchestration platforms, making it an excellent choice for developing cloud-native applications that leverage containerization and deployment in distributed environments. Here’s an in-depth look at Go’s compatibility with containers and orchestration:</p>

<ul>
  <li><strong>Statically Linked Binaries:</strong>
Go compiles to statically linked binaries, which means that an application’s executable includes all its dependencies. This reduces the need for external libraries and ensures that the application runs consistently across different environments. Statically linked binaries are ideal for containerization, as they eliminate version conflicts and compatibility issues.</li>
  <li><strong>Lightweight Binaries:</strong>
Go’s compiled binaries are relatively small in size compared to applications written in some other languages. This attribute is advantageous for containerization, as it results in smaller container images. Smaller images lead to faster deployment, less storage consumption, and improved resource utilization.</li>
  <li><strong>Simplified Dependency Management:</strong>
Go’s built-in package management tool, “go get,” makes it easy to manage dependencies. The Go tooling ensures that dependencies are versioned and isolated, reducing the chances of conflicts when building and deploying containerized applications.</li>
  <li><strong>Efficient Resource Utilization:</strong>
Go’s efficient memory management and concurrency model are well-suited for containerized applications. Applications written in Go can make better use of the resources allocated to containers, maximizing performance and minimizing overhead.</li>
  <li><strong>Integration with Container Runtimes:</strong>
Go’s compatibility with container runtimes like Docker is seamless. Applications written in Go can be packaged into Docker containers with ease, providing a consistent way to deploy and manage applications across different environments.</li>
  <li><strong>Kubernetes Compatibility:</strong>
Go is a favored language within the Kubernetes community due to its compatibility and efficiency. Kubernetes, a popular container orchestration platform, works seamlessly with Go applications. Go’s lightweight nature and concurrency model align well with the dynamic nature of Kubernetes clusters.</li>
  <li><strong>Kubernetes Native Libraries:</strong>
Go has native libraries that simplify interactions with Kubernetes. The “client-go” library allows developers to interact with the Kubernetes API and manage resources programmatically. This facilitates the development of custom controllers, operators, and automation tools for Kubernetes.</li>
  <li><strong>Service Discovery and Load Balancing:</strong>
Go applications can utilize service discovery and load balancing features offered by container orchestration platforms like Kubernetes. These features enable applications to dynamically discover and communicate with other services within the cluster.</li>
  <li><strong>Scalability and Elasticity:</strong>
Go’s built-in concurrency model and lightweight goroutines facilitate the development of applications that can scale horizontally by adding more instances. This aligns well with the principles of containerization and orchestration, where applications can be scaled up or down based on demand.</li>
  <li><strong>Continuous Integration and Continuous Deployment (CI/CD):</strong>
Go’s fast compilation times and small binaries contribute to efficient CI/CD pipelines. Developers can quickly build and deploy container images, enabling rapid iteration and frequent releases.</li>
</ul>

<h1 id="6-robust-standard-library">6<strong>. Robust Standard Library:</strong></h1>

<p>Golang boasts a robust and comprehensive standard library that provides developers with a wide range of tools and functionalities to simplify common programming tasks. This standard library contributes to Go’s efficiency, productivity, and suitability for cloud-native development. Here’s an in-depth look at Go’s robust standard library:</p>

<p><strong>1. Networking:</strong></p>

<ul>
  <li><strong>net/http:</strong> Offers an HTTP client and server implementation with support for HTTP/1.1, HTTP/2, and WebSocket protocols.</li>
  <li><strong>net:</strong> Provides networking primitives for working with sockets, IP addresses, and DNS resolution.</li>
</ul>

<p><strong>2. Concurrency:</strong></p>

<ul>
  <li><strong>sync:</strong> Offers synchronization primitives like mutexes and condition variables for safe concurrent programming.</li>
  <li><strong>context:</strong> Facilitates cancellation and timeout management across concurrent tasks.</li>
</ul>

<p><strong>3. I/O and File Handling:</strong></p>

<ul>
  <li><strong>io:</strong> Defines interfaces for I/O operations, making it easy to work with different I/O sources and sinks.</li>
  <li><strong>bufio:</strong> Provides buffered I/O for efficient reading and writing of data.</li>
</ul>

<p><strong>4. Data Serialization and Encoding:</strong></p>

<ul>
  <li><strong>encoding/json:</strong> Enables JSON serialization and deserialization.</li>
  <li><strong>encoding/xml:</strong> Supports XML encoding and decoding.</li>
  <li><strong>encoding/gob:</strong> Facilitates binary serialization for Go types.</li>
</ul>

<p><strong>5. Data Manipulation and Parsing:</strong></p>

<ul>
  <li><strong>strings:</strong> Offers utilities for string manipulation and searching.</li>
  <li><strong>strconv:</strong> Provides functions for converting strings to basic types and vice versa.</li>
  <li><strong>regexp:</strong> Allows regular expression pattern matching and substitution.</li>
</ul>

<p><strong>6. Time and Date Handling:</strong></p>

<ul>
  <li><strong>time:</strong> Facilitates time and date manipulation, formatting, and parsing.</li>
  <li><strong>time/tzdata:</strong> Provides time zone information.</li>
</ul>

<p><strong>7. Encryption and Hashing:</strong></p>

<ul>
  <li><strong>crypto:</strong> Offers cryptographic primitives for hash functions, encryption, decryption, and more.</li>
  <li><strong>crypto/tls:</strong> Implements secure communication over TLS/SSL.</li>
</ul>

<p><strong>8. Data Structures and Collections:</strong></p>

<ul>
  <li><strong>container:</strong> Provides useful data structures like heap, ring, and list.</li>
  <li><strong>heap:</strong> Offers heap implementation for use in priority queues.</li>
</ul>

<p><strong>9. Command-Line Tools and Flags:</strong></p>

<ul>
  <li><strong>flag:</strong> Supports parsing command-line flags and arguments.</li>
  <li><strong>os:</strong> Provides functionalities for interacting with the operating system, including file manipulation and environment variables.</li>
</ul>

<p><strong>10. Internationalization and Localization:</strong></p>

<ul>
  <li><strong>i18n:</strong> Facilitates internationalization and localization of applications.</li>
</ul>

<p><strong>11. Reflection:</strong></p>

<ul>
  <li><strong>reflect:</strong> Enables introspection of Go types, allowing runtime inspection of objects.</li>
</ul>

<p><strong>12. Testing and Benchmarking:</strong></p>

<ul>
  <li><strong>testing:</strong> Offers a testing framework for writing unit tests and benchmarks.</li>
  <li><strong>testing/quick:</strong> Provides utilities for property-based testing.</li>
</ul>

<p><strong>13. Regular Expressions:</strong></p>

<ul>
  <li><strong>regexp:</strong> Supports regular expression pattern matching and replacement.</li>
</ul>

<p><strong>14. Error Handling:</strong></p>

<ul>
  <li><strong>errors:</strong> Provides the <strong><code>error</code></strong> interface for consistent error handling.</li>
</ul>

<p><strong>15. Miscellaneous Utilities:</strong></p>

<ul>
  <li><strong>fmt:</strong> Facilitates formatted I/O and string formatting.</li>
  <li><strong>log:</strong> Offers a basic logging package.</li>
  <li><strong>sort:</strong> Provides sorting algorithms for slices.</li>
  <li><strong>path/filepath:</strong> Enables manipulation of file paths.</li>
  <li><strong>math:</strong> Offers mathematical functions.</li>
</ul>

<p><strong>16. Reflection:</strong></p>

<ul>
  <li><strong>reflect:</strong> Allows inspection of types, values, and methods at runtime.</li>
</ul>

<p><strong>17. Unicode and Character Handling:</strong></p>

<ul>
  <li><strong>unicode:</strong> Provides utilities for working with Unicode characters and code points.</li>
</ul>

<p><strong>18. System-Level Interaction:</strong></p>

<ul>
  <li><strong>syscall:</strong> Allows direct interaction with the operating system’s system calls.</li>
</ul>

<p><strong>19. Dependency Management:</strong></p>

<ul>
  <li><strong>go mod:</strong> Provides tools for managing dependencies and versioning in Go modules.</li>
</ul>

<p>In summary, Go’s robust standard library covers a wide range of functionalities required for various programming tasks, from networking and I/O to concurrency, encryption, testing, and more. This comprehensive library accelerates development by providing consistent and reliable solutions to common challenges, making Go a powerful language for building cloud-native applications efficiently.</p>

<h1 id="7-community-and-tooling">7<strong>. Community and Tooling:</strong></h1>

<p><strong>Community:</strong></p>

<ul>
  <li><strong>Vibrant Community:</strong> The Go (Golang) community is known for its inclusivity, collaboration, and open-source spirit. Developers from diverse backgrounds contribute to discussions, share knowledge, and provide support.</li>
  <li><strong>Open Development:</strong> Go’s open-source nature encourages community participation. The development process, codebase, and documentation are accessible to all.</li>
  <li><strong>Resources and Communication:</strong> Official resources, mailing lists, forums, and social media platforms facilitate communication, knowledge sharing, and troubleshooting.</li>
  <li><strong>Knowledge Exchange:</strong> Online platforms like Reddit and Stack Overflow offer spaces for developers to ask questions, share insights, and stay updated on Go-related news.</li>
</ul>

<p><strong>Tooling:</strong></p>

<ul>
  <li><strong>Go Command:</strong> The central tool for Go development, it handles tasks like building, testing, and running Go programs.</li>
  <li><strong>Go Modules:</strong> The official dependency management system simplifies versioning, dependency resolution, and module management.</li>
  <li><strong>Formatting and Imports:</strong> Tools like gofmt and goimports ensure consistent code formatting and manage imports, maintaining readability and organization.</li>
  <li><strong>Testing and Profiling:</strong> The testing package supports unit testing and benchmarking, while tools like pprof and trace aid in profiling and performance analysis.</li>
  <li><strong>Documentation Generation:</strong> godoc generates user-friendly documentation from code comments, facilitating understanding and usability.</li>
</ul>

<h1 id="8-ease-of-deployment">8. <strong>Ease of Deployment:</strong></h1>

<ul>
  <li><strong>Statically Compiled Binaries:</strong> Go’s compiled binaries include all dependencies, leading to consistent behavior across environments and reducing dependency-related issues.</li>
  <li><strong>Minimal Dependencies:</strong> Go binaries have minimal runtime dependencies, eliminating the need for complex runtime environments and simplifying deployment.</li>
  <li><strong>Predictable Behavior:</strong> The lack of external dependencies and dynamic linking ensures predictable application behavior, reducing surprises during deployment.</li>
  <li><strong>Efficient Deployment Pipelines:</strong> Statically linked binaries and minimal dependencies contribute to efficient Continuous Integration and Continuous Deployment (CI/CD) pipelines.</li>
  <li><strong>Container Compatibility:</strong> Go’s compatibility with containers and orchestration platforms allows applications to be seamlessly packaged and deployed in dynamic cloud environments.</li>
</ul>

<p>In conclusion, Go’s lightweight nature, built-in concurrency support, efficient memory management, and compatibility with containers and orchestration platforms make it a prime choice for cloud-native development. Its speed, scalability, and robust standard library further solidify its position as an excellent fit for building applications that leverage the full potential of cloud computing.</p>]]></content><author><name></name></author><category term="go" /><summary type="html"><![CDATA[1. What is a “Cloud Native” Application?]]></summary></entry><entry><title type="html">What is SOLID Principle</title><link href="/what-is-solid-principle" rel="alternate" type="text/html" title="What is SOLID Principle" /><published>2023-09-18T00:00:00+07:00</published><updated>2023-09-18T00:00:00+07:00</updated><id>/solid-principle</id><content type="html" xml:base="/what-is-solid-principle"><![CDATA[<p>The SOLID principles are a set of five design principles that help developers create more maintainable, flexible, and understandable software. Each principle addresses a specific aspect of software design and encourages the development of clean and modular code. Let’s go through each of the SOLID principles and provide an example in Go (Golang) for each:</p>

<p><strong>1. Single Responsibility Principle (SRP):</strong></p>
<ul>
  <li>A class should have only one reason to change, meaning it should have only one responsibility.</li>
  <li>This principle encourages separation of concerns.</li>
</ul>

<p>Example in Go:</p>
<pre><code class="language-go">package main

import "fmt"

type Order struct {
    ID     int
    Status string
}

// OrderRepository handles database operations for orders
type OrderRepository struct{}

func (o *OrderRepository) SaveOrder(order *Order) {
    // Save the order to the database
    fmt.Printf("Order %d saved with status %s\n", order.ID, order.Status)
}

// OrderService handles business logic related to orders
type OrderService struct {
    repo *OrderRepository
}

func (os *OrderService) ProcessOrder(order *Order) {
    // Business logic for processing orders
    order.Status = "Processed"
    os.repo.SaveOrder(order)
}

func main() {
    orderRepo := &amp;OrderRepository{}
    orderService := &amp;OrderService{repo: orderRepo}

    order := &amp;Order{ID: 1, Status: "Pending"}
    orderService.ProcessOrder(order)
}
</code></pre>

<p>In this example, we have separate components (<code>OrderRepository</code> and <code>OrderService</code>) responsible for handling database operations and business logic, respectively, adhering to the Single Responsibility Principle.</p>

<p><strong>2. Open-Closed Principle (OCP):</strong></p>
<ul>
  <li>Software entities (classes, modules, functions) should be open for extension but closed for modification.</li>
  <li>This principle encourages adding new functionality by extending existing code, rather than changing it.</li>
</ul>

<p>Example in Go:</p>
<pre><code class="language-go">package main

import "fmt"

type Shape interface {
    Area() float64
}

type Rectangle struct {
    Width  float64
    Height float64
}

func (r Rectangle) Area() float64 {
    return r.Width * r.Height
}

type Circle struct {
    Radius float64
}

func (c Circle) Area() float64 {
    return 3.14 * c.Radius * c.Radius
}

func CalculateArea(shape Shape) {
    fmt.Printf("Area of shape is: %.2f\n", shape.Area())
}

func main() {
    rect := Rectangle{Width: 5, Height: 3}
    circle := Circle{Radius: 2}

    CalculateArea(rect)
    CalculateArea(circle)
}
</code></pre>

<p>The Open-Closed Principle is demonstrated here by defining a <code>Shape</code> interface that can be extended with new shapes (e.g., adding a <code>Triangle</code>) without modifying the existing code that calculates the area.</p>

<p><strong>3. Liskov Substitution Principle (LSP):</strong></p>
<ul>
  <li>Objects of a derived class must be able to replace objects of the base class without affecting the correctness of the program.</li>
  <li>This principle ensures that derived classes adhere to the contract established by their base classes.</li>
</ul>

<p>Example in Go:</p>
<pre><code class="language-go">package main

import "fmt"

type Bird interface {
    Fly() string
}

type Sparrow struct{}

func (s Sparrow) Fly() string {
    return "Sparrow flies"
}

type Ostrich struct{}

func (o Ostrich) Fly() string {
    return "Ostrich cannot fly"
}

func MakeBirdFly(bird Bird) {
    fmt.Println(bird.Fly())
}

func main() {
    sparrow := Sparrow{}
    ostrich := Ostrich{}

    MakeBirdFly(sparrow)
    MakeBirdFly(ostrich)
}
</code></pre>

<p>Here, both <code>Sparrow</code> and <code>Ostrich</code> implement the <code>Bird</code> interface, but while <code>Sparrow</code> can fly, <code>Ostrich</code> cannot. Still, both can be used interchangeably with the <code>MakeBirdFly</code> function, adhering to the Liskov Substitution Principle.</p>

<p><strong>4. Interface Segregation Principle (ISP):</strong></p>
<ul>
  <li>Clients should not be forced to depend on interfaces they do not use.</li>
  <li>This principle encourages creating smaller, more focused interfaces.</li>
</ul>

<p>Example in Go:</p>
<pre><code class="language-go">package main

import "fmt"

type Worker interface {
    Work()
}

type Eater interface {
    Eat()
}

type Robot struct{}

func (r Robot) Work() {
    fmt.Println("Robot is working")
}

func (r Robot) Eat() {
    fmt.Println("Robot does not eat")
}

type Human struct{}

func (h Human) Work() {
    fmt.Println("Human is working")
}

func (h Human) Eat() {
    fmt.Println("Human is eating")
}

func main() {
    robot := Robot{}
    human := Human{}

    var worker Worker
    var eater Eater

    worker = robot
    eater = human

    worker.Work()
    eater.Eat()
}
</code></pre>

<p>In this example, we have two interfaces, <code>Worker</code> and <code>Eater</code>, and two types, <code>Robot</code> and <code>Human</code>. Each type only implements the methods it needs, adhering to the Interface Segregation Principle.</p>

<p><strong>5. Dependency Inversion Principle (DIP):</strong></p>
<ul>
  <li>High-level modules should not depend on low-level modules. Both should depend on abstractions.</li>
  <li>Abstractions should not depend on details. Details should depend on abstractions.</li>
  <li>This principle encourages the use of interfaces and abstractions to decouple high-level and low-level modules.</li>
</ul>

<p>Example in Go:</p>
<pre><code class="language-go">package main

import "fmt"

type Switchable interface {
    TurnOn()
    TurnOff()
}

type LightBulb struct {
    IsOn bool
}

func (lb *LightBulb) TurnOn() {
    lb.IsOn = true
    fmt.Println("Light bulb is on")
}

func (lb *LightBulb) TurnOff() {
    lb.IsOn = false
    fmt.Println("Light bulb is off")
}

type RemoteControl struct {
    Device Switchable
}

func (rc *RemoteControl) PressOnButton() {
    rc.Device.TurnOn()
}

func (rc *RemoteControl) PressOffButton() {
    rc.Device.TurnOff()
}

func main() {
    bulb := &amp;LightBulb{}
    remote := &amp;RemoteControl{Device: bulb}

    remote.PressOnButton()
    remote.PressOffButton()
}
</code></pre>

<p>The Dependency Inversion Principle is demonstrated here by creating an abstraction <code>Switchable</code> that allows the <code>RemoteControl</code> to work with different devices without depending on their concrete implementations. This decouples high-level and low-level modules.</p>]]></content><author><name></name></author><category term="principle" /><summary type="html"><![CDATA[The SOLID principles are a set of five design principles that help developers create more maintainable, flexible, and understandable software. Each principle addresses a specific aspect of software design and encourages the development of clean and modular code. Let’s go through each of the SOLID principles and provide an example in Go (Golang) for each:]]></summary></entry><entry><title type="html">Leetcode Most Asked Questions</title><link href="/leetcode-most-asked-questions" rel="alternate" type="text/html" title="Leetcode Most Asked Questions" /><published>2023-09-15T00:00:00+07:00</published><updated>2023-09-15T00:00:00+07:00</updated><id>/leetcode-most-asked-questions</id><content type="html" xml:base="/leetcode-most-asked-questions"><![CDATA[<h1 id="random">Random</h1>
<div class="container">
    <div class="select-box">
        <label for="tags">Tag</label>
        <select id="tags"></select>
    </div>
    <div class="select-box">
        <label for="difficulties">Difficulty</label>
        <select id="difficulties"></select>
    </div>
    <button onclick="changeRandomBar()">🎲</button>
    <button onclick="resetRandomBar()">❌</button>
</div>

<div id="random-result"></div>

<script type="application/json" id="leetfeed">[
    
        
    
        
    
        
    
        
    
        
    
        
    
        
            {
                "content": "# Random{% include random-leetcode-bar.html %}# List Order By Frequency## **Array**### Easy- [Two Sum](https://leetcode.com/problems/two-sum/)- [Best Time to Buy and Sell Stock](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/)- [Unique Number of Occurrences](https://leetcode.com/problems/unique-number-of-occurrences/description/)- [Merge Sorted Array](https://leetcode.com/problems/merge-sorted-array/description/)- [Contains Duplicate](https://leetcode.com/problems/contains-duplicate/description/)- [Pascal's Triangle](https://leetcode.com/problems/pascals-triangle/description/)- [Sort Integers by The Number of 1 Bits](https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits/description/)- [Running Sum of 1d Array](https://leetcode.com/problems/running-sum-of-1d-array/description/)- [Remove Duplicates from Sorted Array](https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/)- [Move Zeroes](https://leetcode.com/problems/move-zeroes/description/)- [Check If It Is a Straight Line](https://leetcode.com/problems/check-if-it-is-a-straight-line/description/)- [Binary Search](https://leetcode.com/problems/binary-search/description/)- [Majority Element](https://leetcode.com/problems/majority-element/description/)- [Richest Customer Wealth](https://leetcode.com/problems/richest-customer-wealth/description/)- [Intersection of Two Arrays](https://leetcode.com/problems/intersection-of-two-arrays/description/)- [Flood Fill](https://leetcode.com/problems/flood-fill/description/)### Medium- [Predict the Winner](https://leetcode.com/problems/predict-the-winner/description/)- [Spiral Matrix](https://leetcode.com/problems/spiral-matrix/description/)- [3Sum](https://leetcode.com/problems/3sum/description/)- [Merge Intervals](https://leetcode.com/problems/merge-intervals/description/)- [Number of Islands](https://leetcode.com/problems/number-of-islands/description/)- [Next Permutation](https://leetcode.com/problems/next-permutation/description/)- [Container With Most Water](https://leetcode.com/problems/container-with-most-water/description/)- [Maximum Subarray](https://leetcode.com/problems/maximum-subarray/description/)- [Minimize Maximum of Array](https://leetcode.com/problems/minimize-maximum-of-array/description/)- [Group Anagrams](https://leetcode.com/problems/group-anagrams/description/)- [Subarray Sum Equals K](https://leetcode.com/problems/subarray-sum-equals-k/description/)- [Kth Largest Element in an Array](https://leetcode.com/problems/kth-largest-element-in-an-array/description/)- [Rotate Image](https://leetcode.com/problems/rotate-image/description/)- [Longest Consecutive Sequence](https://leetcode.com/problems/longest-consecutive-sequence/description/)- [Shortest Bridge](https://leetcode.com/problems/shortest-bridge/description/)- [Fair Distribution of Cookies](https://leetcode.com/problems/fair-distribution-of-cookies/description/)- [Search in Rotated Sorted Array](https://leetcode.com/problems/search-in-rotated-sorted-array/description/)- [Boats to Save People](https://leetcode.com/problems/boats-to-save-people/description/)### Hard- [Trapping Rain Water](https://leetcode.com/problems/trapping-rain-water/description/)- [Median of Two Sorted Arrays](https://leetcode.com/problems/median-of-two-sorted-arrays/description/)- [Minimum Number of Taps to Open to Water a Garden](https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/description/)- [Frog Jump](https://leetcode.com/problems/frog-jump/description/)- [Minimum Cost to Make Array Equal](https://leetcode.com/problems/minimum-cost-to-make-array-equal/description/)## **Sorting**### Easy- [Merge Sorted Array](https://leetcode.com/problems/merge-sorted-array/description/)- [Contains Duplicate](https://leetcode.com/problems/contains-duplicate/description/)- [Sort Integers by The Number of 1 Bits](https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits/description/)- [Valid Anagram](https://leetcode.com/problems/valid-anagram/description/)- [Majority Element](https://leetcode.com/problems/majority-element/description/)- [Intersection of Two Arrays](https://leetcode.com/problems/intersection-of-two-arrays/description/)- [Can Make Arithmetic Progression From Sequence](https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence/description/)- [Average Salary Excluding the Minimum and Maximum Salary](https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/description/)- [Squares of a Sorted Array](https://leetcode.com/problems/squares-of-a-sorted-array/description/)- [Sort Array by Increasing Frequency](https://leetcode.com/problems/sort-array-by-increasing-frequency/description/)- [Missing Number](https://leetcode.com/problems/missing-number/description/)- [The K Weakest Rows in a Matrix](https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/description/)- [Fair Candy Swap](https://leetcode.com/problems/fair-candy-swap/description/)- [Maximum Product of Three Numbers](https://leetcode.com/problems/maximum-product-of-three-numbers/description/)- [Intersection of Two Arrays II](https://leetcode.com/problems/intersection-of-two-arrays-ii/description/)- [Minimum Absolute Difference](https://leetcode.com/problems/minimum-absolute-difference/description/)### Medium- [3Sum](https://leetcode.com/problems/3sum/description/)- [Merge Intervals](https://leetcode.com/problems/merge-intervals/description/)- [Group Anagrams](https://leetcode.com/problems/group-anagrams/description/)- [Reorganize String](https://leetcode.com/problems/reorganize-string/description/)- [Kth Largest Element in an Array](https://leetcode.com/problems/kth-largest-element-in-an-array/description/)- [Boats to Save People](https://leetcode.com/problems/boats-to-save-people/description/)- [Least Number of Unique Integers after K Removals](https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals/description/)- [4Sum](https://leetcode.com/problems/4sum/description/)- [Meeting Rooms II ~ Premium](https://leetcode.com/problems/meeting-rooms-ii/description/)- [Top K Frequent Elements](https://leetcode.com/problems/top-k-frequent-elements/description/)- [Largest Number](https://leetcode.com/problems/largest-number/description/)- [Number of Subsequences That Satisfy the Given Sum Condition](https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/description/)- [Maximum Length of Pair Chain](https://leetcode.com/problems/maximum-length-of-pair-chain/description/)- [Design a Todo List ~ Premium](https://leetcode.com/problems/design-a-todo-list/description/)- [Rank Teams by Votes](https://leetcode.com/problems/rank-teams-by-votes/description/)### Hard- [Minimum Cost to Make Array Equal](https://leetcode.com/problems/minimum-cost-to-make-array-equal/description/)- [Maximum Number of Events That Can Be Attended II](https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/description/)- [Put Marbles in Bags](https://leetcode.com/problems/put-marbles-in-bags/description/)- [Smallest Range Covering Elements from K Lists](https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/description/)## **Binary Search**### Easy- [Binary Search](https://leetcode.com/problems/binary-search/description/)- [Intersection of Two Arrays](https://leetcode.com/problems/intersection-of-two-arrays/description/)- [Sqrt(x)](https://leetcode.com/problems/sqrtx/description/)- [First Bad Version](https://leetcode.com/problems/first-bad-version/description/)- [Missing Number](https://leetcode.com/problems/missing-number/description/)- [Search Insert Position](https://leetcode.com/problems/search-insert-position/description/)- [Count Negative Numbers in a Sorted Matrix](https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/description/)- [The K Weakest Rows in a Matrix](https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/description/)- [Fair Candy Swap](https://leetcode.com/problems/fair-candy-swap/description/)- [Kth Missing Positive Number](https://leetcode.com/problems/kth-missing-positive-number/description/)- [Intersection of Two Arrays II](https://leetcode.com/problems/intersection-of-two-arrays-ii/description/)- [Find Smallest Letter Greater Than Target](https://leetcode.com/problems/find-smallest-letter-greater-than-target/description/)- [Arranging Coins](https://leetcode.com/problems/arranging-coins/description/)- [Special Array With X Elements Greater Than or Equal X](https://leetcode.com/problems/special-array-with-x-elements-greater-than-or-equal-x/description/)### Medium- [Minimize Maximum of Array](https://leetcode.com/problems/minimize-maximum-of-array/description/)- [Maximum Value at a Given Index in a Bounded Array](https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array/description/)- [Search in Rotated Sorted Array](https://leetcode.com/problems/search-in-rotated-sorted-array/description/)- [Longest Arithmetic Subsequence](https://leetcode.com/problems/longest-arithmetic-subsequence/description/)- [Minimize the Maximum Difference of Pairs](https://leetcode.com/problems/minimize-the-maximum-difference-of-pairs/description/)- [Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/description/)- [Peak Index in a Mountain Array](https://leetcode.com/problems/peak-index-in-a-mountain-array/description/)- [Maximize the Confusion of an Exam](https://leetcode.com/problems/maximize-the-confusion-of-an-exam/description/)- [Capacity To Ship Packages Within D Days](https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/description/)- [Koko Eating Bananas](https://leetcode.com/problems/koko-eating-bananas/description/)- [Number of Subsequences That Satisfy the Given Sum Condition](https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/description/)- [Design Hit Counter ~ Premium](https://leetcode.com/problems/design-hit-counter/description/)- [Find the Duplicate Number](https://leetcode.com/problems/find-the-duplicate-number/description/)- [Single Element in a Sorted Array](https://leetcode.com/problems/single-element-in-a-sorted-array/description/)  ### Hard- [Median of Two Sorted Arrays](https://leetcode.com/problems/median-of-two-sorted-arrays/description/)- [Minimum Cost to Make Array Equal](https://leetcode.com/problems/minimum-cost-to-make-array-equal/description/)- [Maximum Running Time of N Computers](https://leetcode.com/problems/maximum-running-time-of-n-computers/description/)- [Maximum Number of Events That Can Be Attended II](https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/description/)- [Partition Array Into Two Arrays to Minimize Sum Difference](https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/description/)- [Maximum Profit in Job Scheduling](https://leetcode.com/problems/maximum-profit-in-job-scheduling/description/)## **Hash Table**### Easy- [Two Sum](https://leetcode.com/problems/two-sum/description/)- [Roman to Integer](https://leetcode.com/problems/roman-to-integer/description/)- [Unique Number of Occurrences](https://leetcode.com/problems/unique-number-of-occurrences/description/)- [Contains Duplicate](https://leetcode.com/problems/contains-duplicate/description/)- [Majority Element](https://leetcode.com/problems/majority-element/description/)- [Valid Anagram](https://leetcode.com/problems/valid-anagram/description/)- [Happy Number](https://leetcode.com/problems/happy-number/description/)- [Logger Rate Limiter ~ Premium](https://leetcode.com/problems/logger-rate-limiter/description/)- [Intersection of Two Arrays](https://leetcode.com/problems/intersection-of-two-arrays/description/)- [Degree of an Array](https://leetcode.com/problems/degree-of-an-array/description/)- [Isomorphic Strings](https://leetcode.com/problems/isomorphic-strings/description/)- [Check Whether Two Strings are Almost Equivalent](https://leetcode.com/problems/check-whether-two-strings-are-almost-equivalent/description/)- [Sort Array by Increasing Frequency](https://leetcode.com/problems/sort-array-by-increasing-frequency/description/)- [Next Greater Element I](https://leetcode.com/problems/next-greater-element-i/description/)- [Missing Number](https://leetcode.com/problems/missing-number/description/)- [Linked List Cycle](https://leetcode.com/problems/linked-list-cycle/description/)- [First Unique Character in a String](https://leetcode.com/problems/first-unique-character-in-a-string/description/)- [Contains Duplicate II](https://leetcode.com/problems/contains-duplicate-ii/description/)- [Buddy Strings](https://leetcode.com/problems/buddy-strings/description/)### Medium- [Longest Substring Without Repeating Characters](https://leetcode.com/problems/longest-substring-without-repeating-characters/description/)- [LRU Cache](https://leetcode.com/problems/lru-cache/description/)- [Letter Combinations of a Phone Number](https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/)- [Line Reflection ~ Premium](https://leetcode.com/problems/line-reflection/description/)- [Reorganize String](https://leetcode.com/problems/reorganize-string/description/)- [Group Anagrams](https://leetcode.com/problems/group-anagrams/description/)- [Longest Consecutive Sequence](https://leetcode.com/problems/longest-consecutive-sequence/description/)- [Longest Arithmetic Subsequence](https://leetcode.com/problems/longest-arithmetic-subsequence/description/)- [Subarray Sum Equals K](https://leetcode.com/problems/subarray-sum-equals-k/description/)- [Longest Arithmetic Subsequence of Given Difference](https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/description/)- [Set Matrix Zeroes](https://leetcode.com/problems/set-matrix-zeroes/description/)- [Least Number of Unique Integers after K Removals](https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals/description/)- [Design Authentication Manager](https://leetcode.com/problems/design-authentication-manager/description/)### Hard- [Smallest Range Covering Elements from K Lists](https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/description/)- [Bus Routes](https://leetcode.com/problems/bus-routes/description/)- [First Missing Positive](https://leetcode.com/problems/first-missing-positive/description/)- [All O`one Data Structure](https://leetcode.com/problems/all-oone-data-structure/description/)- [Largest Color Value in a Directed Graph](https://leetcode.com/problems/largest-color-value-in-a-directed-graph/description/)- [Sudoku Solver](https://leetcode.com/problems/sudoku-solver/description/)"
            }
        
    
        
    
        
    
        
    
        
    
]</script>

<script>
    let leet_feed_data = JSON.parse(document.getElementById('leetfeed').textContent);
    let toJson = function (txt) {
        let data = {}
        const tags = txt.split('## **').slice(1);
        for (let _tag of tags) {
            let cut_size = _tag.indexOf("**") + 2;
            let tag_name = _tag.substring(0, cut_size - 2).toLowerCase();

            let tag = _tag.slice(cut_size);
            let difs = tag.split("### ").splice(1);
            data[tag_name] = {}
            for (let _diff of difs) {
                let probs = _diff.split("- ");
                let diff_name = probs[0].toLowerCase();

                probs = probs.slice(1, probs.length);
                data[tag_name][diff_name] = []
                for (let prob of probs) {
                    let inputString = prob;
                    // Using regular expressions to extract the text within square brackets and parentheses
                    let matches = inputString.match(/\[(.*?)\]\((.*?)\)/);

                    if (matches) {
                        let title = matches[1]; // Extracted text within square brackets
                        let url = matches[2];   // Extracted text within parentheses
                        data[tag_name][diff_name].push({
                            "title": title,
                            "url": url
                        });
                    } else {
                        console.error("String format not as expected.");
                    }
                }
            }
        }
        return data;
    }
    let emojis = ['🧠', '🤯', '🚀', '🚨', '👻', '😆', '😩', '👮', '🎃', '😶', '😤', '🤔', '🧑‍🏭', '🤓', '🤙', '🦸🏻‍♀️', '😈', '🐼', '👾'];
    let random_data = toJson(leet_feed_data[0].content);
    let capitalizeFirstLetter = function (s) {
        return s.replace(/\b\w/g, match => match.toUpperCase());
    }
    let set_tags_option = function () {
        let select = document.getElementById("tags");
        for (let key in random_data) {
            let newOption = document.createElement("option");
            newOption.value = key;
            newOption.text = capitalizeFirstLetter(key);
            select.appendChild(newOption);
        }
    }
    let set_difficulty_option = function () {
        let select = document.getElementById("difficulties");
        for (let key of ['easy', 'medium', 'hard']) {
            let newOption = document.createElement("option");
            newOption.value = key;
            newOption.text = capitalizeFirstLetter(key);
            select.appendChild(newOption);
        }
    }
    set_tags_option();
    set_difficulty_option();
    let changeRandomBar = function () {
        let tag = document.getElementById("tags").value;
        let difficulty = document.getElementById("difficulties").value
        let random_index = Math.floor(Math.random() * random_data[tag][difficulty].length);
        let item = random_data[tag][difficulty][random_index];

        let result_bar = document.getElementById('random-result');
        result_bar.innerHTML = "";
        let q = document.createElement('a');
        const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
        q.href = item.url;
        q.textContent = randomEmoji + ' ' + item.title;
        result_bar.appendChild(q);
    }
    let resetRandomBar = function () {
        let result_bar = document.getElementById('random-result');
        result_bar.innerHTML = "";
    }
</script>

<style>
    .container {
        display: flex;
        align-items: center;
    }

    .select-box {
        margin-right: 20px;
    }

    label {
        font-weight: bold;
        margin-bottom: 5px;
    }

    select {
        width: 100%;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
        font-size: 17px;
    }

    #random-result {
        margin-top: 10px;
        font-size: 20px;
        margin-bottom: 10px;
    }

    button {
        padding: 0px 15px;
        font-size: 40px;
        text-align: center;
        cursor: pointer;
        outline: none;
        border: none;
        border-radius: 15px;
        box-shadow: 0 9px #999;
        margin-bottom: 10px;
        margin-right: 10px;
    }

    button:hover {
        transform: translateY(-2px);
    }

    button:active {
        box-shadow: 0 5px #545353;
        transform: translateY(5px);
    }
</style>

<h1 id="list-order-by-frequency">List Order By Frequency</h1>

<h2 id="array"><strong>Array</strong></h2>

<h3 id="easy">Easy</h3>
<ul>
  <li><a href="https://leetcode.com/problems/two-sum/">Two Sum</a></li>
  <li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/">Best Time to Buy and Sell Stock</a></li>
  <li><a href="https://leetcode.com/problems/unique-number-of-occurrences/description/">Unique Number of Occurrences</a></li>
  <li><a href="https://leetcode.com/problems/merge-sorted-array/description/">Merge Sorted Array</a></li>
  <li><a href="https://leetcode.com/problems/contains-duplicate/description/">Contains Duplicate</a></li>
  <li><a href="https://leetcode.com/problems/pascals-triangle/description/">Pascal’s Triangle</a></li>
  <li><a href="https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits/description/">Sort Integers by The Number of 1 Bits</a></li>
  <li><a href="https://leetcode.com/problems/running-sum-of-1d-array/description/">Running Sum of 1d Array</a></li>
  <li><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/">Remove Duplicates from Sorted Array</a></li>
  <li><a href="https://leetcode.com/problems/move-zeroes/description/">Move Zeroes</a></li>
  <li><a href="https://leetcode.com/problems/check-if-it-is-a-straight-line/description/">Check If It Is a Straight Line</a></li>
  <li><a href="https://leetcode.com/problems/binary-search/description/">Binary Search</a></li>
  <li><a href="https://leetcode.com/problems/majority-element/description/">Majority Element</a></li>
  <li><a href="https://leetcode.com/problems/richest-customer-wealth/description/">Richest Customer Wealth</a></li>
  <li><a href="https://leetcode.com/problems/intersection-of-two-arrays/description/">Intersection of Two Arrays</a></li>
  <li><a href="https://leetcode.com/problems/flood-fill/description/">Flood Fill</a></li>
</ul>

<h3 id="medium">Medium</h3>
<ul>
  <li><a href="https://leetcode.com/problems/predict-the-winner/description/">Predict the Winner</a></li>
  <li><a href="https://leetcode.com/problems/spiral-matrix/description/">Spiral Matrix</a></li>
  <li><a href="https://leetcode.com/problems/3sum/description/">3Sum</a></li>
  <li><a href="https://leetcode.com/problems/merge-intervals/description/">Merge Intervals</a></li>
  <li><a href="https://leetcode.com/problems/number-of-islands/description/">Number of Islands</a></li>
  <li><a href="https://leetcode.com/problems/next-permutation/description/">Next Permutation</a></li>
  <li><a href="https://leetcode.com/problems/container-with-most-water/description/">Container With Most Water</a></li>
  <li><a href="https://leetcode.com/problems/maximum-subarray/description/">Maximum Subarray</a></li>
  <li><a href="https://leetcode.com/problems/minimize-maximum-of-array/description/">Minimize Maximum of Array</a></li>
  <li><a href="https://leetcode.com/problems/group-anagrams/description/">Group Anagrams</a></li>
  <li><a href="https://leetcode.com/problems/subarray-sum-equals-k/description/">Subarray Sum Equals K</a></li>
  <li><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/description/">Kth Largest Element in an Array</a></li>
  <li><a href="https://leetcode.com/problems/rotate-image/description/">Rotate Image</a></li>
  <li><a href="https://leetcode.com/problems/longest-consecutive-sequence/description/">Longest Consecutive Sequence</a></li>
  <li><a href="https://leetcode.com/problems/shortest-bridge/description/">Shortest Bridge</a></li>
  <li><a href="https://leetcode.com/problems/fair-distribution-of-cookies/description/">Fair Distribution of Cookies</a></li>
  <li><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/description/">Search in Rotated Sorted Array</a></li>
  <li><a href="https://leetcode.com/problems/boats-to-save-people/description/">Boats to Save People</a></li>
</ul>

<h3 id="hard">Hard</h3>
<ul>
  <li><a href="https://leetcode.com/problems/trapping-rain-water/description/">Trapping Rain Water</a></li>
  <li><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/description/">Median of Two Sorted Arrays</a></li>
  <li><a href="https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/description/">Minimum Number of Taps to Open to Water a Garden</a></li>
  <li><a href="https://leetcode.com/problems/frog-jump/description/">Frog Jump</a></li>
  <li><a href="https://leetcode.com/problems/minimum-cost-to-make-array-equal/description/">Minimum Cost to Make Array Equal</a></li>
</ul>

<h2 id="sorting"><strong>Sorting</strong></h2>
<h3 id="easy-1">Easy</h3>
<ul>
  <li><a href="https://leetcode.com/problems/merge-sorted-array/description/">Merge Sorted Array</a></li>
  <li><a href="https://leetcode.com/problems/contains-duplicate/description/">Contains Duplicate</a></li>
  <li><a href="https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits/description/">Sort Integers by The Number of 1 Bits</a></li>
  <li><a href="https://leetcode.com/problems/valid-anagram/description/">Valid Anagram</a></li>
  <li><a href="https://leetcode.com/problems/majority-element/description/">Majority Element</a></li>
  <li><a href="https://leetcode.com/problems/intersection-of-two-arrays/description/">Intersection of Two Arrays</a></li>
  <li><a href="https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence/description/">Can Make Arithmetic Progression From Sequence</a></li>
  <li><a href="https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/description/">Average Salary Excluding the Minimum and Maximum Salary</a></li>
  <li><a href="https://leetcode.com/problems/squares-of-a-sorted-array/description/">Squares of a Sorted Array</a></li>
  <li><a href="https://leetcode.com/problems/sort-array-by-increasing-frequency/description/">Sort Array by Increasing Frequency</a></li>
  <li><a href="https://leetcode.com/problems/missing-number/description/">Missing Number</a></li>
  <li><a href="https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/description/">The K Weakest Rows in a Matrix</a></li>
  <li><a href="https://leetcode.com/problems/fair-candy-swap/description/">Fair Candy Swap</a></li>
  <li><a href="https://leetcode.com/problems/maximum-product-of-three-numbers/description/">Maximum Product of Three Numbers</a></li>
  <li><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/description/">Intersection of Two Arrays II</a></li>
  <li><a href="https://leetcode.com/problems/minimum-absolute-difference/description/">Minimum Absolute Difference</a></li>
</ul>

<h3 id="medium-1">Medium</h3>
<ul>
  <li><a href="https://leetcode.com/problems/3sum/description/">3Sum</a></li>
  <li><a href="https://leetcode.com/problems/merge-intervals/description/">Merge Intervals</a></li>
  <li><a href="https://leetcode.com/problems/group-anagrams/description/">Group Anagrams</a></li>
  <li><a href="https://leetcode.com/problems/reorganize-string/description/">Reorganize String</a></li>
  <li><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/description/">Kth Largest Element in an Array</a></li>
  <li><a href="https://leetcode.com/problems/boats-to-save-people/description/">Boats to Save People</a></li>
  <li><a href="https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals/description/">Least Number of Unique Integers after K Removals</a></li>
  <li><a href="https://leetcode.com/problems/4sum/description/">4Sum</a></li>
  <li><a href="https://leetcode.com/problems/meeting-rooms-ii/description/">Meeting Rooms II ~ Premium</a></li>
  <li><a href="https://leetcode.com/problems/top-k-frequent-elements/description/">Top K Frequent Elements</a></li>
  <li><a href="https://leetcode.com/problems/largest-number/description/">Largest Number</a></li>
  <li><a href="https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/description/">Number of Subsequences That Satisfy the Given Sum Condition</a></li>
  <li><a href="https://leetcode.com/problems/maximum-length-of-pair-chain/description/">Maximum Length of Pair Chain</a></li>
  <li><a href="https://leetcode.com/problems/design-a-todo-list/description/">Design a Todo List ~ Premium</a></li>
  <li><a href="https://leetcode.com/problems/rank-teams-by-votes/description/">Rank Teams by Votes</a></li>
</ul>

<h3 id="hard-1">Hard</h3>
<ul>
  <li><a href="https://leetcode.com/problems/minimum-cost-to-make-array-equal/description/">Minimum Cost to Make Array Equal</a></li>
  <li><a href="https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/description/">Maximum Number of Events That Can Be Attended II</a></li>
  <li><a href="https://leetcode.com/problems/put-marbles-in-bags/description/">Put Marbles in Bags</a></li>
  <li><a href="https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/description/">Smallest Range Covering Elements from K Lists</a></li>
</ul>

<h2 id="binary-search"><strong>Binary Search</strong></h2>
<h3 id="easy-2">Easy</h3>
<ul>
  <li><a href="https://leetcode.com/problems/binary-search/description/">Binary Search</a></li>
  <li><a href="https://leetcode.com/problems/intersection-of-two-arrays/description/">Intersection of Two Arrays</a></li>
  <li><a href="https://leetcode.com/problems/sqrtx/description/">Sqrt(x)</a></li>
  <li><a href="https://leetcode.com/problems/first-bad-version/description/">First Bad Version</a></li>
  <li><a href="https://leetcode.com/problems/missing-number/description/">Missing Number</a></li>
  <li><a href="https://leetcode.com/problems/search-insert-position/description/">Search Insert Position</a></li>
  <li><a href="https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/description/">Count Negative Numbers in a Sorted Matrix</a></li>
  <li><a href="https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/description/">The K Weakest Rows in a Matrix</a></li>
  <li><a href="https://leetcode.com/problems/fair-candy-swap/description/">Fair Candy Swap</a></li>
  <li><a href="https://leetcode.com/problems/kth-missing-positive-number/description/">Kth Missing Positive Number</a></li>
  <li><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/description/">Intersection of Two Arrays II</a></li>
  <li><a href="https://leetcode.com/problems/find-smallest-letter-greater-than-target/description/">Find Smallest Letter Greater Than Target</a></li>
  <li><a href="https://leetcode.com/problems/arranging-coins/description/">Arranging Coins</a></li>
  <li><a href="https://leetcode.com/problems/special-array-with-x-elements-greater-than-or-equal-x/description/">Special Array With X Elements Greater Than or Equal X</a></li>
</ul>

<h3 id="medium-2">Medium</h3>
<ul>
  <li><a href="https://leetcode.com/problems/minimize-maximum-of-array/description/">Minimize Maximum of Array</a></li>
  <li><a href="https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array/description/">Maximum Value at a Given Index in a Bounded Array</a></li>
  <li><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/description/">Search in Rotated Sorted Array</a></li>
  <li><a href="https://leetcode.com/problems/longest-arithmetic-subsequence/description/">Longest Arithmetic Subsequence</a></li>
  <li><a href="https://leetcode.com/problems/minimize-the-maximum-difference-of-pairs/description/">Minimize the Maximum Difference of Pairs</a></li>
  <li><a href="https://leetcode.com/problems/longest-increasing-subsequence/description/">Longest Increasing Subsequence</a></li>
  <li><a href="https://leetcode.com/problems/peak-index-in-a-mountain-array/description/">Peak Index in a Mountain Array</a></li>
  <li><a href="https://leetcode.com/problems/maximize-the-confusion-of-an-exam/description/">Maximize the Confusion of an Exam</a></li>
  <li><a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/description/">Capacity To Ship Packages Within D Days</a></li>
  <li><a href="https://leetcode.com/problems/koko-eating-bananas/description/">Koko Eating Bananas</a></li>
  <li><a href="https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/description/">Number of Subsequences That Satisfy the Given Sum Condition</a></li>
  <li><a href="https://leetcode.com/problems/design-hit-counter/description/">Design Hit Counter ~ Premium</a></li>
  <li><a href="https://leetcode.com/problems/find-the-duplicate-number/description/">Find the Duplicate Number</a></li>
  <li><a href="https://leetcode.com/problems/single-element-in-a-sorted-array/description/">Single Element in a Sorted Array</a></li>
</ul>

<h3 id="hard-2">Hard</h3>
<ul>
  <li><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/description/">Median of Two Sorted Arrays</a></li>
  <li><a href="https://leetcode.com/problems/minimum-cost-to-make-array-equal/description/">Minimum Cost to Make Array Equal</a></li>
  <li><a href="https://leetcode.com/problems/maximum-running-time-of-n-computers/description/">Maximum Running Time of N Computers</a></li>
  <li><a href="https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/description/">Maximum Number of Events That Can Be Attended II</a></li>
  <li><a href="https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/description/">Partition Array Into Two Arrays to Minimize Sum Difference</a></li>
  <li><a href="https://leetcode.com/problems/maximum-profit-in-job-scheduling/description/">Maximum Profit in Job Scheduling</a></li>
</ul>

<h2 id="hash-table"><strong>Hash Table</strong></h2>
<h3 id="easy-3">Easy</h3>
<ul>
  <li><a href="https://leetcode.com/problems/two-sum/description/">Two Sum</a></li>
  <li><a href="https://leetcode.com/problems/roman-to-integer/description/">Roman to Integer</a></li>
  <li><a href="https://leetcode.com/problems/unique-number-of-occurrences/description/">Unique Number of Occurrences</a></li>
  <li><a href="https://leetcode.com/problems/contains-duplicate/description/">Contains Duplicate</a></li>
  <li><a href="https://leetcode.com/problems/majority-element/description/">Majority Element</a></li>
  <li><a href="https://leetcode.com/problems/valid-anagram/description/">Valid Anagram</a></li>
  <li><a href="https://leetcode.com/problems/happy-number/description/">Happy Number</a></li>
  <li><a href="https://leetcode.com/problems/logger-rate-limiter/description/">Logger Rate Limiter ~ Premium</a></li>
  <li><a href="https://leetcode.com/problems/intersection-of-two-arrays/description/">Intersection of Two Arrays</a></li>
  <li><a href="https://leetcode.com/problems/degree-of-an-array/description/">Degree of an Array</a></li>
  <li><a href="https://leetcode.com/problems/isomorphic-strings/description/">Isomorphic Strings</a></li>
  <li><a href="https://leetcode.com/problems/check-whether-two-strings-are-almost-equivalent/description/">Check Whether Two Strings are Almost Equivalent</a></li>
  <li><a href="https://leetcode.com/problems/sort-array-by-increasing-frequency/description/">Sort Array by Increasing Frequency</a></li>
  <li><a href="https://leetcode.com/problems/next-greater-element-i/description/">Next Greater Element I</a></li>
  <li><a href="https://leetcode.com/problems/missing-number/description/">Missing Number</a></li>
  <li><a href="https://leetcode.com/problems/linked-list-cycle/description/">Linked List Cycle</a></li>
  <li><a href="https://leetcode.com/problems/first-unique-character-in-a-string/description/">First Unique Character in a String</a></li>
  <li><a href="https://leetcode.com/problems/contains-duplicate-ii/description/">Contains Duplicate II</a></li>
  <li><a href="https://leetcode.com/problems/buddy-strings/description/">Buddy Strings</a></li>
</ul>

<h3 id="medium-3">Medium</h3>
<ul>
  <li><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/">Longest Substring Without Repeating Characters</a></li>
  <li><a href="https://leetcode.com/problems/lru-cache/description/">LRU Cache</a></li>
  <li><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/">Letter Combinations of a Phone Number</a></li>
  <li><a href="https://leetcode.com/problems/line-reflection/description/">Line Reflection ~ Premium</a></li>
  <li><a href="https://leetcode.com/problems/reorganize-string/description/">Reorganize String</a></li>
  <li><a href="https://leetcode.com/problems/group-anagrams/description/">Group Anagrams</a></li>
  <li><a href="https://leetcode.com/problems/longest-consecutive-sequence/description/">Longest Consecutive Sequence</a></li>
  <li><a href="https://leetcode.com/problems/longest-arithmetic-subsequence/description/">Longest Arithmetic Subsequence</a></li>
  <li><a href="https://leetcode.com/problems/subarray-sum-equals-k/description/">Subarray Sum Equals K</a></li>
  <li><a href="https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/description/">Longest Arithmetic Subsequence of Given Difference</a></li>
  <li><a href="https://leetcode.com/problems/set-matrix-zeroes/description/">Set Matrix Zeroes</a></li>
  <li><a href="https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals/description/">Least Number of Unique Integers after K Removals</a></li>
  <li><a href="https://leetcode.com/problems/design-authentication-manager/description/">Design Authentication Manager</a></li>
</ul>

<h3 id="hard-3">Hard</h3>
<ul>
  <li><a href="https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/description/">Smallest Range Covering Elements from K Lists</a></li>
  <li><a href="https://leetcode.com/problems/bus-routes/description/">Bus Routes</a></li>
  <li><a href="https://leetcode.com/problems/first-missing-positive/description/">First Missing Positive</a></li>
  <li><a href="https://leetcode.com/problems/all-oone-data-structure/description/">All O`one Data Structure</a></li>
  <li><a href="https://leetcode.com/problems/largest-color-value-in-a-directed-graph/description/">Largest Color Value in a Directed Graph</a></li>
  <li><a href="https://leetcode.com/problems/sudoku-solver/description/">Sudoku Solver</a></li>
</ul>]]></content><author><name></name></author><category term="leetcode" /><summary type="html"><![CDATA[Random Tag Difficulty 🎲 ❌ List Order By Frequency]]></summary></entry><entry><title type="html">What Is Http</title><link href="/what-is-http" rel="alternate" type="text/html" title="What Is Http" /><published>2023-02-18T00:00:00+07:00</published><updated>2023-02-18T00:00:00+07:00</updated><id>/what-is-http</id><content type="html" xml:base="/what-is-http"><![CDATA[<p>HTTP, or Hypertext Transfer Protocol, is an application-layer protocol used for transmitting hypermedia documents (such as HTML) over the World Wide Web. It’s the foundation of data communication on the internet, enabling web browsers to request and retrieve web pages from web servers. HTTP operates on top of the TCP (Transmission Control Protocol) or sometimes on top of the TLS/SSL for secure communication (HTTPS). Here are some details about HTTP and its methods:</p>

<p><strong>HTTP Methods (HTTP Verbs):</strong>
HTTP defines several methods or verbs, which are used to specify the desired action to be performed on a resource identified by a URL (Uniform Resource Locator). Each method has a specific purpose:</p>

<ol>
  <li>
    <p><strong>GET:</strong> The GET method is used to request data from a specified resource. It retrieves data without causing any change in the server’s state. It’s used for fetching web pages, images, and other resources.</p>
  </li>
  <li>
    <p><strong>POST:</strong> The POST method is used to submit data to be processed to a specified resource. It can be used for form submissions, file uploads, and other actions that may modify server data.</p>
  </li>
  <li>
    <p><strong>PUT:</strong> The PUT method is used to update a resource or create a new resource if it doesn’t exist. It replaces the entire resource with the data provided in the request.</p>
  </li>
  <li>
    <p><strong>PATCH:</strong> The PATCH method is used to apply partial modifications to a resource. It’s typically used when you want to update only specific parts of a resource, rather than replacing the entire resource as in PUT.</p>
  </li>
  <li>
    <p><strong>DELETE:</strong> The DELETE method is used to request the removal of a resource from the server. It deletes the specified resource.</p>
  </li>
  <li>
    <p><strong>HEAD:</strong> The HEAD method is similar to GET but requests only the headers of the response, not the actual content. It’s often used to check if a resource has been modified since a certain date or to gather metadata about the resource.</p>
  </li>
  <li>
    <p><strong>OPTIONS:</strong> The OPTIONS method is used to retrieve information about the communication options for the target resource. It can be used to inquire which HTTP methods are supported by the server for a particular resource.</p>
  </li>
  <li>
    <p><strong>CONNECT:</strong> The CONNECT method is used to establish a network connection to a resource, usually for use with a proxy server. It’s primarily used in the context of HTTPS tunneling.</p>
  </li>
  <li>
    <p><strong>TRACE:</strong> The TRACE method is used to retrieve diagnostic information from the server. It’s primarily used for debugging and testing purposes.</p>
  </li>
</ol>

<p><strong>Differences Between HTTP Methods:</strong></p>

<p>The primary differences between these methods lie in their purpose and the effect they have on the server and its resources:</p>

<ul>
  <li><strong>GET:</strong> Retrieves data from a resource without altering it.</li>
  <li><strong>POST:</strong> Submits data to the server, potentially leading to changes in server data.</li>
  <li><strong>PUT:</strong> Replaces an entire resource or creates a new one if it doesn’t exist.</li>
  <li><strong>PATCH:</strong> Applies partial modifications to a resource.</li>
  <li><strong>DELETE:</strong> Removes a resource from the server.</li>
  <li><strong>HEAD:</strong> Retrieves only the headers of a response, not the content.</li>
  <li><strong>OPTIONS:</strong> Retrieves information about the communication options for a resource.</li>
  <li><strong>CONNECT:</strong> Establishes a network connection to a resource.</li>
  <li><strong>TRACE:</strong> Retrieves diagnostic information from the server.</li>
</ul>

<p>Here’s a comparison of common HTTP methods in a table format:</p>

<table>
  <thead>
    <tr>
      <th>HTTP Method</th>
      <th>Purpose</th>
      <th>Idempotent</th>
      <th>Request Body</th>
      <th>Safe</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>GET</td>
      <td>Retrieve data from a resource</td>
      <td>Yes</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>POST</td>
      <td>Submit data to a resource</td>
      <td>No</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>PUT</td>
      <td>Replace a resource</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>DELETE</td>
      <td>Remove a resource</td>
      <td>Yes</td>
      <td>Optional</td>
      <td>No</td>
    </tr>
    <tr>
      <td>HEAD</td>
      <td>Retrieve headers only</td>
      <td>Yes</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>OPTIONS</td>
      <td>Retrieve communication options</td>
      <td>Yes</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>PATCH</td>
      <td>Apply partial modifications</td>
      <td>No</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>CONNECT</td>
      <td>Establish network connection</td>
      <td>No</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>TRACE</td>
      <td>Retrieve diagnostic info</td>
      <td>Yes</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p><strong>Idempotent:</strong> An idempotent method means that making the same request multiple times has the same effect as making it once. For example, multiple GET or DELETE requests with the same parameters should have the same outcome each time. PUT and HEAD are also idempotent if the request body is the same.</p>
  </li>
  <li>
    <p><strong>Request Body:</strong> Indicates whether the HTTP method can include data in the request body. Methods like POST, PUT, DELETE, and PATCH can include a request body, while methods like GET, HEAD, OPTIONS, and TRACE typically do not.</p>
  </li>
  <li>
    <p><strong>Safe:</strong> A safe method is one that should not have any side effects on the server or its resources. Safe methods are generally cacheable, and they don’t change the server state. GET, HEAD, and OPTIONS are considered safe methods.</p>
  </li>
</ul>

<p>Please note that while these are general characteristics of these HTTP methods, the specific behavior can vary depending on how they are implemented by a server and the application’s design. Additionally, the use of these methods should adhere to the HTTP specification and best practices for web development.</p>

<p><strong>Why Sending Login Request Using POST:</strong></p>

<p>Sending login requests using the HTTP POST method, as opposed to the GET method, is a common practice for several important reasons:</p>

<ol>
  <li>
    <p><strong>Security:</strong> When you submit login credentials (such as a username and password), you want to keep this information confidential. Using a POST request sends the data in the request body, which is not visible in the URL or browser history. In contrast, GET requests append data to the URL as query parameters, making it visible in the browser’s address bar and potentially exposing sensitive information.</p>
  </li>
  <li>
    <p><strong>Data Length:</strong> POST requests can handle larger amounts of data in the request body compared to GET requests, which are limited in the amount of data they can carry in the URL. Login credentials are usually sensitive and may include lengthy encrypted or hashed data, making them unsuitable for inclusion in a URL.</p>
  </li>
  <li>
    <p><strong>Caching:</strong> GET requests are often cached by web browsers, proxies, and other intermediaries. This means that if login credentials were sent via a GET request, they might be stored in browser history, cached on the user’s device, or logged on intermediary servers, posing a security risk.</p>
  </li>
  <li>
    <p><strong>Idempotence:</strong> HTTP GET requests are considered idempotent, meaning they have no side effects on the server and can be safely repeated multiple times without changing the server’s state. Login operations are not idempotent; they typically involve creating a new session or changing the user’s state on the server. Using POST, which is not idempotent, reflects the non-idempotent nature of login requests more accurately.</p>
  </li>
  <li>
    <p><strong>CSRF Protection:</strong> POST requests can include anti-CSRF (Cross-Site Request Forgery) tokens in the request body to protect against CSRF attacks, which involve unauthorized actions being performed on behalf of an authenticated user.</p>
  </li>
</ol>

<p>Using the POST method for login requests is a security best practice because it helps protect sensitive data, prevents data from being exposed in URLs, accommodates larger data payloads, and aligns with the non-idempotent and state-changing nature of login operations. It’s essential to follow secure coding practices when implementing authentication mechanisms to ensure the protection of user credentials and sensitive data.</p>

<p><strong>HTTP Methods Categorized Into Two Groups Regarding Caching:</strong></p>

<ol>
  <li>
    <p><strong>Safe Methods:</strong> Safe methods are HTTP methods that are considered to be safe, meaning they should not have any side effects on the server or its resources. These methods are generally cacheable by intermediaries like web browsers and proxies. Safe methods include:</p>

    <ul>
      <li>GET: Retrieves data from a resource.</li>
      <li>HEAD: Retrieves only the headers of a response (similar to GET but without the body).</li>
      <li>OPTIONS: Retrieves information about the communication options for a resource.</li>
    </ul>
  </li>
  <li>
    <p><strong>Unsafe Methods:</strong> Unsafe methods are HTTP methods that can have side effects on the server or its resources, and they are generally not cacheable. Unsafe methods include:</p>

    <ul>
      <li>POST: Submits data to the server to create or modify a resource.</li>
      <li>PUT: Replaces a resource at a specific URL with new data.</li>
      <li>DELETE: Requests the removal of a resource from the server.</li>
      <li>PATCH: Applies partial modifications to a resource.</li>
    </ul>
  </li>
</ol>

<p>The HTTP specification defines that safe methods are generally cacheable because they don’t change server state. Therefore, GET, HEAD, and OPTIONS requests are often cached by intermediaries to improve performance and reduce server load. However, caching behavior can be influenced by various factors, including HTTP headers such as “Cache-Control” and “Expires.”</p>

<p><strong>Does Body Data Encrypted When Send POST Request?</strong></p>

<p>When you send data over HTTPS using a POST request, the data in the request body is encrypted. HTTPS (Hypertext Transfer Protocol Secure) is designed to provide a secure and encrypted communication channel between your web browser (or any other client) and the web server. Here’s how the encryption process works:</p>

<ol>
  <li>
    <p><strong>SSL/TLS Encryption:</strong> HTTPS uses SSL (Secure Sockets Layer) or its successor, TLS (Transport Layer Security), to encrypt the data transmitted between the client (your computer) and the server. This encryption ensures that the data is protected from eavesdropping and tampering while in transit over the internet.</p>
  </li>
  <li>
    <p><strong>Secure Handshake:</strong> When you establish a connection to a website over HTTPS, your browser and the server go through a handshake process. During this process, they exchange encryption keys and negotiate the encryption parameters to establish a secure session.</p>
  </li>
  <li>
    <p><strong>Request and Response Encryption:</strong> Once the secure session is established, all data exchanged between your client and the server, including the contents of the POST request body, is encrypted before transmission. This means that the data is protected from interception by third parties during its journey from your device to the server.</p>
  </li>
  <li>
    <p><strong>Decryption on the Server:</strong> When the server receives the encrypted data, it has the decryption key to decode the data and process it. This happens on the server side, ensuring that the server can access and understand the contents of the POST request.</p>
  </li>
</ol>

<p>HTTPS ensures end-to-end encryption for data sent via POST requests. This encryption is a fundamental aspect of HTTPS, making it a secure way to transmit sensitive information such as login credentials, credit card details, or any other private data over the internet. It provides confidentiality, integrity, and authenticity for the data in transit, helping to protect users’ privacy and security.</p>]]></content><author><name></name></author><category term="computer-network" /><summary type="html"><![CDATA[HTTP, or Hypertext Transfer Protocol, is an application-layer protocol used for transmitting hypermedia documents (such as HTML) over the World Wide Web. It’s the foundation of data communication on the internet, enabling web browsers to request and retrieve web pages from web servers. HTTP operates on top of the TCP (Transmission Control Protocol) or sometimes on top of the TLS/SSL for secure communication (HTTPS). Here are some details about HTTP and its methods:]]></summary></entry><entry><title type="html">Go Heap Tree</title><link href="/go-heap-tree" rel="alternate" type="text/html" title="Go Heap Tree" /><published>2022-07-16T00:00:00+07:00</published><updated>2022-07-16T00:00:00+07:00</updated><id>/go-heap-tree</id><content type="html" xml:base="/go-heap-tree"><![CDATA[<p>Implement golang heap tree interface</p>

<hr />

<h3 id="code">Code</h3>
<pre><code class="language-go">package main

import (
	"container/heap"
	"log"
)
type IntHeap []int

func (h IntHeap) Len() int { 
    return len(h) 
}
func (h IntHeap) Less(i, j int) bool { 
    return h[i] &lt; h[j] 
}
func (h IntHeap) Swap(i, j int) { 
    h[i], h[j] = h[j], h[i] 
}
func (h *IntHeap) Push(x interface{}) {
	*h = append(*h, x.(int))
}
func (h *IntHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[0 : n-1]
	return x
}
func main() {
	h := IntHeap{}
	heap.Push(&amp;h,5)
	heap.Push(&amp;h,1)
	heap.Push(&amp;h,3)
	log.Println(h)
	log.Println(heap.Pop(&amp;h))
}

</code></pre>

<h3 id="output">Output</h3>
<pre><code>$go run main.go
2022/07/15 09:47:10 [1 5 3]
2022/07/15 09:47:10 1

</code></pre>]]></content><author><name></name></author><category term="go" /><category term="data-structure" /><summary type="html"><![CDATA[Implement golang heap tree interface]]></summary></entry><entry><title type="html">Go Worker Pools</title><link href="/go-worker-pools" rel="alternate" type="text/html" title="Go Worker Pools" /><published>2022-06-03T00:00:00+07:00</published><updated>2022-06-03T00:00:00+07:00</updated><id>/go-worker-pools</id><content type="html" xml:base="/go-worker-pools"><![CDATA[<p>Implement golang worker pools</p>

<p>Init worker pools with 3 workers then assign 3, 5, 6, 7 tasks to see runtime difference, each task takes 100ms processing</p>

<p>Round 1 - 3 tasks - runtime 101ms</p>

<p>Round 2 - 5 tasks - runtime 202ms</p>

<p>Round 3 - 6 tasks - runtime 202ms</p>

<p>Round 4 - 7 tasks - runtime 302ms</p>

<hr />

<h3 id="code">Code</h3>
<pre><code class="language-go">package main

import (
	"log"
	"time"
)

type Worker struct {
	MaxNumJob     int
	Jobs, Results chan int
}

func (w *Worker) work(jobs &lt;-chan int, results chan&lt;- int) {
	for j := range jobs {
		time.Sleep(100 * time.Millisecond)
		results &lt;- j
	}
}
func (w *Worker) Init(num int) {
	w.MaxNumJob = num
	w.Jobs = make(chan int, w.MaxNumJob)
	w.Results = make(chan int, w.MaxNumJob)
	for i := 1; i &lt;= w.MaxNumJob; i++ {
		go w.work(w.Jobs, w.Results)
	}
	return
}
func (w *Worker) assign(round int, num int) {
	log.Println("[Round]", round)
	start := time.Now()
	for i := 1; i &lt;= num; i++ {
		w.Jobs &lt;- i
	}
	for i := 1; i &lt;= num; i++ {
		res := &lt;-w.Results
		log.Println(res)
	}
	end := time.Now()
	log.Println("Runtime:", end.Sub(start).Milliseconds(), "ms")
}

func main() {
	worker := &amp;Worker{}
	worker.Init(3)
	worker.assign(1, 3)
	worker.assign(2, 5)
	worker.assign(3, 6)
	worker.assign(4, 7)
}

</code></pre>

<h3 id="output">Output</h3>
<pre><code>$go run main.go
2022/06/03 22:20:01 [Round] 1
2022/06/03 22:20:01 2
2022/06/03 22:20:01 1
2022/06/03 22:20:01 3
2022/06/03 22:20:01 Runtime: 101 ms
2022/06/03 22:20:01 [Round] 2
2022/06/03 22:20:01 1
2022/06/03 22:20:01 2
2022/06/03 22:20:01 3
2022/06/03 22:20:01 4
2022/06/03 22:20:01 5
2022/06/03 22:20:01 Runtime: 202 ms
2022/06/03 22:20:01 [Round] 3
2022/06/03 22:20:01 2
2022/06/03 22:20:01 3
2022/06/03 22:20:01 1
2022/06/03 22:20:02 4
2022/06/03 22:20:02 6
2022/06/03 22:20:02 5
2022/06/03 22:20:02 Runtime: 202 ms
2022/06/03 22:20:02 [Round] 4
2022/06/03 22:20:02 2
2022/06/03 22:20:02 3
2022/06/03 22:20:02 1
2022/06/03 22:20:02 4
2022/06/03 22:20:02 6
2022/06/03 22:20:02 5
2022/06/03 22:20:02 7
2022/06/03 22:20:02 Runtime: 302 ms

</code></pre>]]></content><author><name></name></author><category term="go" /><category term="goroutine" /><category term="concurrency" /><summary type="html"><![CDATA[Implement golang worker pools]]></summary></entry></feed>